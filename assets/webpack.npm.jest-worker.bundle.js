"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkecomm_levity"] = self["webpackChunkecomm_levity"] || []).push([["npm.jest-worker"],{

/***/ "./node_modules/jest-worker/build/Farm.js":
/*!************************************************!*\
  !*** ./node_modules/jest-worker/build/Farm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _FifoQueue = _interopRequireDefault(__webpack_require__(/*! ./FifoQueue */ \"./node_modules/jest-worker/build/FifoQueue.js\"));\n\nvar _types = __webpack_require__(/*! ./types */ \"./node_modules/jest-worker/build/types.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass Farm {\n  constructor(_numOfWorkers, _callback, options = {}) {\n    var _options$workerSchedu, _options$taskQueue;\n\n    this._numOfWorkers = _numOfWorkers;\n    this._callback = _callback;\n\n    _defineProperty(this, '_computeWorkerKey', void 0);\n\n    _defineProperty(this, '_workerSchedulingPolicy', void 0);\n\n    _defineProperty(this, '_cacheKeys', Object.create(null));\n\n    _defineProperty(this, '_locks', []);\n\n    _defineProperty(this, '_offset', 0);\n\n    _defineProperty(this, '_taskQueue', void 0);\n\n    this._computeWorkerKey = options.computeWorkerKey;\n    this._workerSchedulingPolicy =\n      (_options$workerSchedu = options.workerSchedulingPolicy) !== null &&\n      _options$workerSchedu !== void 0\n        ? _options$workerSchedu\n        : 'round-robin';\n    this._taskQueue =\n      (_options$taskQueue = options.taskQueue) !== null &&\n      _options$taskQueue !== void 0\n        ? _options$taskQueue\n        : new _FifoQueue.default();\n  }\n\n  doWork(method, ...args) {\n    const customMessageListeners = new Set();\n\n    const addCustomMessageListener = listener => {\n      customMessageListeners.add(listener);\n      return () => {\n        customMessageListeners.delete(listener);\n      };\n    };\n\n    const onCustomMessage = message => {\n      customMessageListeners.forEach(listener => listener(message));\n    };\n\n    const promise = new Promise( // Bind args to this function so it won't reference to the parent scope.\n      // This prevents a memory leak in v8, because otherwise the function will\n      // retaine args for the closure.\n      ((args, resolve, reject) => {\n        const computeWorkerKey = this._computeWorkerKey;\n        const request = [_types.CHILD_MESSAGE_CALL, false, method, args];\n        let worker = null;\n        let hash = null;\n\n        if (computeWorkerKey) {\n          hash = computeWorkerKey.call(this, method, ...args);\n          worker = hash == null ? null : this._cacheKeys[hash];\n        }\n\n        const onStart = worker => {\n          if (hash != null) {\n            this._cacheKeys[hash] = worker;\n          }\n        };\n\n        const onEnd = (error, result) => {\n          customMessageListeners.clear();\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        };\n\n        const task = {\n          onCustomMessage,\n          onEnd,\n          onStart,\n          request\n        };\n\n        if (worker) {\n          this._taskQueue.enqueue(task, worker.getWorkerId());\n\n          this._process(worker.getWorkerId());\n        } else {\n          this._push(task);\n        }\n      }).bind(null, args)\n    );\n    promise.UNSTABLE_onCustomMessage = addCustomMessageListener;\n    return promise;\n  }\n\n  _process(workerId) {\n    if (this._isLocked(workerId)) {\n      return this;\n    }\n\n    const task = this._taskQueue.dequeue(workerId);\n\n    if (!task) {\n      return this;\n    }\n\n    if (task.request[1]) {\n      throw new Error('Queue implementation returned processed task');\n    } // Reference the task object outside so it won't be retained by onEnd,\n    // and other properties of the task object, such as task.request can be\n    // garbage collected.\n\n    const taskOnEnd = task.onEnd;\n\n    const onEnd = (error, result) => {\n      taskOnEnd(error, result);\n\n      this._unlock(workerId);\n\n      this._process(workerId);\n    };\n\n    task.request[1] = true;\n\n    this._lock(workerId);\n\n    this._callback(\n      workerId,\n      task.request,\n      task.onStart,\n      onEnd,\n      task.onCustomMessage\n    );\n\n    return this;\n  }\n\n  _push(task) {\n    this._taskQueue.enqueue(task);\n\n    const offset = this._getNextWorkerOffset();\n\n    for (let i = 0; i < this._numOfWorkers; i++) {\n      this._process((offset + i) % this._numOfWorkers);\n\n      if (task.request[1]) {\n        break;\n      }\n    }\n\n    return this;\n  } // Typescript ensures that the switch statement is exhaustive.\n  // Adding an explicit return at the end would disable the exhaustive check void.\n  // eslint-disable-next-line consistent-return\n\n  _getNextWorkerOffset() {\n    switch (this._workerSchedulingPolicy) {\n      case 'in-order':\n        return 0;\n\n      case 'round-robin':\n        return this._offset++;\n    }\n  }\n\n  _lock(workerId) {\n    this._locks[workerId] = true;\n  }\n\n  _unlock(workerId) {\n    this._locks[workerId] = false;\n  }\n\n  _isLocked(workerId) {\n    return this._locks[workerId];\n  }\n}\n\nexports.default = Farm;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvRmFybS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLHdDQUF3QyxtQkFBTyxDQUFDLGtFQUFhOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsMERBQVM7O0FBRTlCO0FBQ0Esd0NBQXdDO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRDtBQUNwRDs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CLHdCQUF3QjtBQUM1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9qZXN0LXdvcmtlci9idWlsZC9GYXJtLmpzPzFiYTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9GaWZvUXVldWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vRmlmb1F1ZXVlJykpO1xuXG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuY2xhc3MgRmFybSB7XG4gIGNvbnN0cnVjdG9yKF9udW1PZldvcmtlcnMsIF9jYWxsYmFjaywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9vcHRpb25zJHdvcmtlclNjaGVkdSwgX29wdGlvbnMkdGFza1F1ZXVlO1xuXG4gICAgdGhpcy5fbnVtT2ZXb3JrZXJzID0gX251bU9mV29ya2VycztcbiAgICB0aGlzLl9jYWxsYmFjayA9IF9jYWxsYmFjaztcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2NvbXB1dGVXb3JrZXJLZXknLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICdfd29ya2VyU2NoZWR1bGluZ1BvbGljeScsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ19jYWNoZUtleXMnLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2xvY2tzJywgW10pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICdfb2Zmc2V0JywgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ190YXNrUXVldWUnLCB2b2lkIDApO1xuXG4gICAgdGhpcy5fY29tcHV0ZVdvcmtlcktleSA9IG9wdGlvbnMuY29tcHV0ZVdvcmtlcktleTtcbiAgICB0aGlzLl93b3JrZXJTY2hlZHVsaW5nUG9saWN5ID1cbiAgICAgIChfb3B0aW9ucyR3b3JrZXJTY2hlZHUgPSBvcHRpb25zLndvcmtlclNjaGVkdWxpbmdQb2xpY3kpICE9PSBudWxsICYmXG4gICAgICBfb3B0aW9ucyR3b3JrZXJTY2hlZHUgIT09IHZvaWQgMFxuICAgICAgICA/IF9vcHRpb25zJHdvcmtlclNjaGVkdVxuICAgICAgICA6ICdyb3VuZC1yb2Jpbic7XG4gICAgdGhpcy5fdGFza1F1ZXVlID1cbiAgICAgIChfb3B0aW9ucyR0YXNrUXVldWUgPSBvcHRpb25zLnRhc2tRdWV1ZSkgIT09IG51bGwgJiZcbiAgICAgIF9vcHRpb25zJHRhc2tRdWV1ZSAhPT0gdm9pZCAwXG4gICAgICAgID8gX29wdGlvbnMkdGFza1F1ZXVlXG4gICAgICAgIDogbmV3IF9GaWZvUXVldWUuZGVmYXVsdCgpO1xuICB9XG5cbiAgZG9Xb3JrKG1ldGhvZCwgLi4uYXJncykge1xuICAgIGNvbnN0IGN1c3RvbU1lc3NhZ2VMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG5cbiAgICBjb25zdCBhZGRDdXN0b21NZXNzYWdlTGlzdGVuZXIgPSBsaXN0ZW5lciA9PiB7XG4gICAgICBjdXN0b21NZXNzYWdlTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjdXN0b21NZXNzYWdlTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBvbkN1c3RvbU1lc3NhZ2UgPSBtZXNzYWdlID0+IHtcbiAgICAgIGN1c3RvbU1lc3NhZ2VMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihtZXNzYWdlKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSggLy8gQmluZCBhcmdzIHRvIHRoaXMgZnVuY3Rpb24gc28gaXQgd29uJ3QgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGEgbWVtb3J5IGxlYWsgaW4gdjgsIGJlY2F1c2Ugb3RoZXJ3aXNlIHRoZSBmdW5jdGlvbiB3aWxsXG4gICAgICAvLyByZXRhaW5lIGFyZ3MgZm9yIHRoZSBjbG9zdXJlLlxuICAgICAgKChhcmdzLCByZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY29tcHV0ZVdvcmtlcktleSA9IHRoaXMuX2NvbXB1dGVXb3JrZXJLZXk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBbX3R5cGVzLkNISUxEX01FU1NBR0VfQ0FMTCwgZmFsc2UsIG1ldGhvZCwgYXJnc107XG4gICAgICAgIGxldCB3b3JrZXIgPSBudWxsO1xuICAgICAgICBsZXQgaGFzaCA9IG51bGw7XG5cbiAgICAgICAgaWYgKGNvbXB1dGVXb3JrZXJLZXkpIHtcbiAgICAgICAgICBoYXNoID0gY29tcHV0ZVdvcmtlcktleS5jYWxsKHRoaXMsIG1ldGhvZCwgLi4uYXJncyk7XG4gICAgICAgICAgd29ya2VyID0gaGFzaCA9PSBudWxsID8gbnVsbCA6IHRoaXMuX2NhY2hlS2V5c1toYXNoXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9uU3RhcnQgPSB3b3JrZXIgPT4ge1xuICAgICAgICAgIGlmIChoYXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5c1toYXNoXSA9IHdvcmtlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb25FbmQgPSAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGN1c3RvbU1lc3NhZ2VMaXN0ZW5lcnMuY2xlYXIoKTtcblxuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB0YXNrID0ge1xuICAgICAgICAgIG9uQ3VzdG9tTWVzc2FnZSxcbiAgICAgICAgICBvbkVuZCxcbiAgICAgICAgICBvblN0YXJ0LFxuICAgICAgICAgIHJlcXVlc3RcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAod29ya2VyKSB7XG4gICAgICAgICAgdGhpcy5fdGFza1F1ZXVlLmVucXVldWUodGFzaywgd29ya2VyLmdldFdvcmtlcklkKCkpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvY2Vzcyh3b3JrZXIuZ2V0V29ya2VySWQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHVzaCh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgfSkuYmluZChudWxsLCBhcmdzKVxuICAgICk7XG4gICAgcHJvbWlzZS5VTlNUQUJMRV9vbkN1c3RvbU1lc3NhZ2UgPSBhZGRDdXN0b21NZXNzYWdlTGlzdGVuZXI7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBfcHJvY2Vzcyh3b3JrZXJJZCkge1xuICAgIGlmICh0aGlzLl9pc0xvY2tlZCh3b3JrZXJJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2sgPSB0aGlzLl90YXNrUXVldWUuZGVxdWV1ZSh3b3JrZXJJZCk7XG5cbiAgICBpZiAoIXRhc2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0YXNrLnJlcXVlc3RbMV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUXVldWUgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgcHJvY2Vzc2VkIHRhc2snKTtcbiAgICB9IC8vIFJlZmVyZW5jZSB0aGUgdGFzayBvYmplY3Qgb3V0c2lkZSBzbyBpdCB3b24ndCBiZSByZXRhaW5lZCBieSBvbkVuZCxcbiAgICAvLyBhbmQgb3RoZXIgcHJvcGVydGllcyBvZiB0aGUgdGFzayBvYmplY3QsIHN1Y2ggYXMgdGFzay5yZXF1ZXN0IGNhbiBiZVxuICAgIC8vIGdhcmJhZ2UgY29sbGVjdGVkLlxuXG4gICAgY29uc3QgdGFza09uRW5kID0gdGFzay5vbkVuZDtcblxuICAgIGNvbnN0IG9uRW5kID0gKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgIHRhc2tPbkVuZChlcnJvciwgcmVzdWx0KTtcblxuICAgICAgdGhpcy5fdW5sb2NrKHdvcmtlcklkKTtcblxuICAgICAgdGhpcy5fcHJvY2Vzcyh3b3JrZXJJZCk7XG4gICAgfTtcblxuICAgIHRhc2sucmVxdWVzdFsxXSA9IHRydWU7XG5cbiAgICB0aGlzLl9sb2NrKHdvcmtlcklkKTtcblxuICAgIHRoaXMuX2NhbGxiYWNrKFxuICAgICAgd29ya2VySWQsXG4gICAgICB0YXNrLnJlcXVlc3QsXG4gICAgICB0YXNrLm9uU3RhcnQsXG4gICAgICBvbkVuZCxcbiAgICAgIHRhc2sub25DdXN0b21NZXNzYWdlXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgX3B1c2godGFzaykge1xuICAgIHRoaXMuX3Rhc2tRdWV1ZS5lbnF1ZXVlKHRhc2spO1xuXG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fZ2V0TmV4dFdvcmtlck9mZnNldCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9udW1PZldvcmtlcnM7IGkrKykge1xuICAgICAgdGhpcy5fcHJvY2Vzcygob2Zmc2V0ICsgaSkgJSB0aGlzLl9udW1PZldvcmtlcnMpO1xuXG4gICAgICBpZiAodGFzay5yZXF1ZXN0WzFdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIFR5cGVzY3JpcHQgZW5zdXJlcyB0aGF0IHRoZSBzd2l0Y2ggc3RhdGVtZW50IGlzIGV4aGF1c3RpdmUuXG4gIC8vIEFkZGluZyBhbiBleHBsaWNpdCByZXR1cm4gYXQgdGhlIGVuZCB3b3VsZCBkaXNhYmxlIHRoZSBleGhhdXN0aXZlIGNoZWNrIHZvaWQuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXG4gIF9nZXROZXh0V29ya2VyT2Zmc2V0KCkge1xuICAgIHN3aXRjaCAodGhpcy5fd29ya2VyU2NoZWR1bGluZ1BvbGljeSkge1xuICAgICAgY2FzZSAnaW4tb3JkZXInOlxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgY2FzZSAncm91bmQtcm9iaW4nOlxuICAgICAgICByZXR1cm4gdGhpcy5fb2Zmc2V0Kys7XG4gICAgfVxuICB9XG5cbiAgX2xvY2sod29ya2VySWQpIHtcbiAgICB0aGlzLl9sb2Nrc1t3b3JrZXJJZF0gPSB0cnVlO1xuICB9XG5cbiAgX3VubG9jayh3b3JrZXJJZCkge1xuICAgIHRoaXMuX2xvY2tzW3dvcmtlcklkXSA9IGZhbHNlO1xuICB9XG5cbiAgX2lzTG9ja2VkKHdvcmtlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2tzW3dvcmtlcklkXTtcbiAgfVxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBGYXJtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/Farm.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/FifoQueue.js":
/*!*****************************************************!*\
  !*** ./node_modules/jest-worker/build/FifoQueue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * First-in, First-out task queue that manages a dedicated pool\n * for each worker as well as a shared queue. The FIFO ordering is guaranteed\n * across the worker specific and shared queue.\n */\nclass FifoQueue {\n  constructor() {\n    _defineProperty(this, '_workerQueues', []);\n\n    _defineProperty(this, '_sharedQueue', new InternalQueue());\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._sharedQueue.enqueue(task);\n\n      return;\n    }\n\n    let workerQueue = this._workerQueues[workerId];\n\n    if (workerQueue == null) {\n      workerQueue = this._workerQueues[workerId] = new InternalQueue();\n    }\n\n    const sharedTop = this._sharedQueue.peekLast();\n\n    const item = {\n      previousSharedTask: sharedTop,\n      task\n    };\n    workerQueue.enqueue(item);\n  }\n\n  dequeue(workerId) {\n    var _this$_workerQueues$w, _workerTop$previousSh, _workerTop$previousSh2;\n\n    const workerTop =\n      (_this$_workerQueues$w = this._workerQueues[workerId]) === null ||\n      _this$_workerQueues$w === void 0\n        ? void 0\n        : _this$_workerQueues$w.peek();\n    const sharedTaskIsProcessed =\n      (_workerTop$previousSh =\n        workerTop === null || workerTop === void 0\n          ? void 0\n          : (_workerTop$previousSh2 = workerTop.previousSharedTask) === null ||\n            _workerTop$previousSh2 === void 0\n          ? void 0\n          : _workerTop$previousSh2.request[1]) !== null &&\n      _workerTop$previousSh !== void 0\n        ? _workerTop$previousSh\n        : true; // Process the top task from the shared queue if\n    // - there's no task in the worker specific queue or\n    // - if the non-worker-specific task after which this worker specifif task\n    //   hasn been queued wasn't processed yet\n\n    if (workerTop != null && sharedTaskIsProcessed) {\n      var _this$_workerQueues$w2,\n        _this$_workerQueues$w3,\n        _this$_workerQueues$w4;\n\n      return (_this$_workerQueues$w2 =\n        (_this$_workerQueues$w3 = this._workerQueues[workerId]) === null ||\n        _this$_workerQueues$w3 === void 0\n          ? void 0\n          : (_this$_workerQueues$w4 = _this$_workerQueues$w3.dequeue()) ===\n              null || _this$_workerQueues$w4 === void 0\n          ? void 0\n          : _this$_workerQueues$w4.task) !== null &&\n        _this$_workerQueues$w2 !== void 0\n        ? _this$_workerQueues$w2\n        : null;\n    }\n\n    return this._sharedQueue.dequeue();\n  }\n}\n\nexports.default = FifoQueue;\n\n/**\n * FIFO queue for a single worker / shared queue.\n */\nclass InternalQueue {\n  constructor() {\n    _defineProperty(this, '_head', null);\n\n    _defineProperty(this, '_last', null);\n  }\n\n  enqueue(value) {\n    const item = {\n      next: null,\n      value\n    };\n\n    if (this._last == null) {\n      this._head = item;\n    } else {\n      this._last.next = item;\n    }\n\n    this._last = item;\n  }\n\n  dequeue() {\n    if (this._head == null) {\n      return null;\n    }\n\n    const item = this._head;\n    this._head = item.next;\n\n    if (this._head == null) {\n      this._last = null;\n    }\n\n    return item.value;\n  }\n\n  peek() {\n    var _this$_head$value, _this$_head;\n\n    return (_this$_head$value =\n      (_this$_head = this._head) === null || _this$_head === void 0\n        ? void 0\n        : _this$_head.value) !== null && _this$_head$value !== void 0\n      ? _this$_head$value\n      : null;\n  }\n\n  peekLast() {\n    var _this$_last$value, _this$_last;\n\n    return (_this$_last$value =\n      (_this$_last = this._last) === null || _this$_last === void 0\n        ? void 0\n        : _this$_last.value) !== null && _this$_last$value !== void 0\n      ? _this$_last$value\n      : null;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvRmlmb1F1ZXVlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9qZXN0LXdvcmtlci9idWlsZC9GaWZvUXVldWUuanM/ZDU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBGaXJzdC1pbiwgRmlyc3Qtb3V0IHRhc2sgcXVldWUgdGhhdCBtYW5hZ2VzIGEgZGVkaWNhdGVkIHBvb2xcbiAqIGZvciBlYWNoIHdvcmtlciBhcyB3ZWxsIGFzIGEgc2hhcmVkIHF1ZXVlLiBUaGUgRklGTyBvcmRlcmluZyBpcyBndWFyYW50ZWVkXG4gKiBhY3Jvc3MgdGhlIHdvcmtlciBzcGVjaWZpYyBhbmQgc2hhcmVkIHF1ZXVlLlxuICovXG5jbGFzcyBGaWZvUXVldWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ193b3JrZXJRdWV1ZXMnLCBbXSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ19zaGFyZWRRdWV1ZScsIG5ldyBJbnRlcm5hbFF1ZXVlKCkpO1xuICB9XG5cbiAgZW5xdWV1ZSh0YXNrLCB3b3JrZXJJZCkge1xuICAgIGlmICh3b3JrZXJJZCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9zaGFyZWRRdWV1ZS5lbnF1ZXVlKHRhc2spO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHdvcmtlclF1ZXVlID0gdGhpcy5fd29ya2VyUXVldWVzW3dvcmtlcklkXTtcblxuICAgIGlmICh3b3JrZXJRdWV1ZSA9PSBudWxsKSB7XG4gICAgICB3b3JrZXJRdWV1ZSA9IHRoaXMuX3dvcmtlclF1ZXVlc1t3b3JrZXJJZF0gPSBuZXcgSW50ZXJuYWxRdWV1ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHNoYXJlZFRvcCA9IHRoaXMuX3NoYXJlZFF1ZXVlLnBlZWtMYXN0KCk7XG5cbiAgICBjb25zdCBpdGVtID0ge1xuICAgICAgcHJldmlvdXNTaGFyZWRUYXNrOiBzaGFyZWRUb3AsXG4gICAgICB0YXNrXG4gICAgfTtcbiAgICB3b3JrZXJRdWV1ZS5lbnF1ZXVlKGl0ZW0pO1xuICB9XG5cbiAgZGVxdWV1ZSh3b3JrZXJJZCkge1xuICAgIHZhciBfdGhpcyRfd29ya2VyUXVldWVzJHcsIF93b3JrZXJUb3AkcHJldmlvdXNTaCwgX3dvcmtlclRvcCRwcmV2aW91c1NoMjtcblxuICAgIGNvbnN0IHdvcmtlclRvcCA9XG4gICAgICAoX3RoaXMkX3dvcmtlclF1ZXVlcyR3ID0gdGhpcy5fd29ya2VyUXVldWVzW3dvcmtlcklkXSkgPT09IG51bGwgfHxcbiAgICAgIF90aGlzJF93b3JrZXJRdWV1ZXMkdyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX3RoaXMkX3dvcmtlclF1ZXVlcyR3LnBlZWsoKTtcbiAgICBjb25zdCBzaGFyZWRUYXNrSXNQcm9jZXNzZWQgPVxuICAgICAgKF93b3JrZXJUb3AkcHJldmlvdXNTaCA9XG4gICAgICAgIHdvcmtlclRvcCA9PT0gbnVsbCB8fCB3b3JrZXJUb3AgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiAoX3dvcmtlclRvcCRwcmV2aW91c1NoMiA9IHdvcmtlclRvcC5wcmV2aW91c1NoYXJlZFRhc2spID09PSBudWxsIHx8XG4gICAgICAgICAgICBfd29ya2VyVG9wJHByZXZpb3VzU2gyID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogX3dvcmtlclRvcCRwcmV2aW91c1NoMi5yZXF1ZXN0WzFdKSAhPT0gbnVsbCAmJlxuICAgICAgX3dvcmtlclRvcCRwcmV2aW91c1NoICE9PSB2b2lkIDBcbiAgICAgICAgPyBfd29ya2VyVG9wJHByZXZpb3VzU2hcbiAgICAgICAgOiB0cnVlOyAvLyBQcm9jZXNzIHRoZSB0b3AgdGFzayBmcm9tIHRoZSBzaGFyZWQgcXVldWUgaWZcbiAgICAvLyAtIHRoZXJlJ3Mgbm8gdGFzayBpbiB0aGUgd29ya2VyIHNwZWNpZmljIHF1ZXVlIG9yXG4gICAgLy8gLSBpZiB0aGUgbm9uLXdvcmtlci1zcGVjaWZpYyB0YXNrIGFmdGVyIHdoaWNoIHRoaXMgd29ya2VyIHNwZWNpZmlmIHRhc2tcbiAgICAvLyAgIGhhc24gYmVlbiBxdWV1ZWQgd2Fzbid0IHByb2Nlc3NlZCB5ZXRcblxuICAgIGlmICh3b3JrZXJUb3AgIT0gbnVsbCAmJiBzaGFyZWRUYXNrSXNQcm9jZXNzZWQpIHtcbiAgICAgIHZhciBfdGhpcyRfd29ya2VyUXVldWVzJHcyLFxuICAgICAgICBfdGhpcyRfd29ya2VyUXVldWVzJHczLFxuICAgICAgICBfdGhpcyRfd29ya2VyUXVldWVzJHc0O1xuXG4gICAgICByZXR1cm4gKF90aGlzJF93b3JrZXJRdWV1ZXMkdzIgPVxuICAgICAgICAoX3RoaXMkX3dvcmtlclF1ZXVlcyR3MyA9IHRoaXMuX3dvcmtlclF1ZXVlc1t3b3JrZXJJZF0pID09PSBudWxsIHx8XG4gICAgICAgIF90aGlzJF93b3JrZXJRdWV1ZXMkdzMgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiAoX3RoaXMkX3dvcmtlclF1ZXVlcyR3NCA9IF90aGlzJF93b3JrZXJRdWV1ZXMkdzMuZGVxdWV1ZSgpKSA9PT1cbiAgICAgICAgICAgICAgbnVsbCB8fCBfdGhpcyRfd29ya2VyUXVldWVzJHc0ID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogX3RoaXMkX3dvcmtlclF1ZXVlcyR3NC50YXNrKSAhPT0gbnVsbCAmJlxuICAgICAgICBfdGhpcyRfd29ya2VyUXVldWVzJHcyICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdGhpcyRfd29ya2VyUXVldWVzJHcyXG4gICAgICAgIDogbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc2hhcmVkUXVldWUuZGVxdWV1ZSgpO1xuICB9XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpZm9RdWV1ZTtcblxuLyoqXG4gKiBGSUZPIHF1ZXVlIGZvciBhIHNpbmdsZSB3b3JrZXIgLyBzaGFyZWQgcXVldWUuXG4gKi9cbmNsYXNzIEludGVybmFsUXVldWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ19oZWFkJywgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgJ19sYXN0JywgbnVsbCk7XG4gIH1cblxuICBlbnF1ZXVlKHZhbHVlKSB7XG4gICAgY29uc3QgaXRlbSA9IHtcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICB2YWx1ZVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5fbGFzdCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9oZWFkID0gaXRlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGFzdC5uZXh0ID0gaXRlbTtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0ID0gaXRlbTtcbiAgfVxuXG4gIGRlcXVldWUoKSB7XG4gICAgaWYgKHRoaXMuX2hlYWQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX2hlYWQ7XG4gICAgdGhpcy5faGVhZCA9IGl0ZW0ubmV4dDtcblxuICAgIGlmICh0aGlzLl9oZWFkID09IG51bGwpIHtcbiAgICAgIHRoaXMuX2xhc3QgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICB9XG5cbiAgcGVlaygpIHtcbiAgICB2YXIgX3RoaXMkX2hlYWQkdmFsdWUsIF90aGlzJF9oZWFkO1xuXG4gICAgcmV0dXJuIChfdGhpcyRfaGVhZCR2YWx1ZSA9XG4gICAgICAoX3RoaXMkX2hlYWQgPSB0aGlzLl9oZWFkKSA9PT0gbnVsbCB8fCBfdGhpcyRfaGVhZCA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX3RoaXMkX2hlYWQudmFsdWUpICE9PSBudWxsICYmIF90aGlzJF9oZWFkJHZhbHVlICE9PSB2b2lkIDBcbiAgICAgID8gX3RoaXMkX2hlYWQkdmFsdWVcbiAgICAgIDogbnVsbDtcbiAgfVxuXG4gIHBlZWtMYXN0KCkge1xuICAgIHZhciBfdGhpcyRfbGFzdCR2YWx1ZSwgX3RoaXMkX2xhc3Q7XG5cbiAgICByZXR1cm4gKF90aGlzJF9sYXN0JHZhbHVlID1cbiAgICAgIChfdGhpcyRfbGFzdCA9IHRoaXMuX2xhc3QpID09PSBudWxsIHx8IF90aGlzJF9sYXN0ID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBfdGhpcyRfbGFzdC52YWx1ZSkgIT09IG51bGwgJiYgX3RoaXMkX2xhc3QkdmFsdWUgIT09IHZvaWQgMFxuICAgICAgPyBfdGhpcyRfbGFzdCR2YWx1ZVxuICAgICAgOiBudWxsO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/FifoQueue.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/PriorityQueue.js":
/*!*********************************************************!*\
  !*** ./node_modules/jest-worker/build/PriorityQueue.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    this._computePriority = _computePriority;\n\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n\n      this._enqueue(task, queue);\n    }\n  }\n\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n\n    const workerTop = workerQueue.peek();\n\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (\n      sharedTop == null ||\n      (workerTop != null && workerTop.priority <= sharedTop.priority)\n    ) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n\n      return (_workerQueue$poll$tas =\n        (_workerQueue$poll = workerQueue.poll()) === null ||\n        _workerQueue$poll === void 0\n          ? void 0\n          : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0\n        ? _workerQueue$poll$tas\n        : null;\n    }\n\n    return this._sharedQueue.poll().task;\n  }\n\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n\n    return queue;\n  }\n}\n\nexports.default = PriorityQueue;\n\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n\n  peek() {\n    var _this$_heap$;\n\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0\n      ? _this$_heap$\n      : null;\n  }\n\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n\n    if (nodes.length === 1) {\n      return;\n    }\n\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n\n      if (parent.priority <= item.priority) {\n        break;\n      }\n\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n\n    let index = 0;\n    nodes[0] =\n      lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (\n        rightChild != null &&\n        rightChild.priority < (swapIndex == null ? element : leftChild).priority\n      ) {\n        swapIndex = rightChildIndex;\n      }\n\n      if (swapIndex == null) {\n        break;\n      }\n\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n\n    return result;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/PriorityQueue.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/WorkerPool.js":
/*!******************************************************!*\
  !*** ./node_modules/jest-worker/build/WorkerPool.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _BaseWorkerPool = _interopRequireDefault(__webpack_require__(/*! ./base/BaseWorkerPool */ \"./node_modules/jest-worker/build/base/BaseWorkerPool.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst canUseWorkerThreads = () => {\n  try {\n    __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'worker_threads'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nclass WorkerPool extends _BaseWorkerPool.default {\n  send(workerId, request, onStart, onEnd, onCustomMessage) {\n    this.getWorkerById(workerId).send(request, onStart, onEnd, onCustomMessage);\n  }\n\n  createWorker(workerOptions) {\n    let Worker;\n\n    if (this._options.enableWorkerThreads && canUseWorkerThreads()) {\n      Worker = __webpack_require__(/*! ./workers/NodeThreadsWorker */ \"./node_modules/jest-worker/build/workers/NodeThreadsWorker.js\").default;\n    } else {\n      Worker = __webpack_require__(/*! ./workers/ChildProcessWorker */ \"./node_modules/jest-worker/build/workers/ChildProcessWorker.js\").default;\n    }\n\n    return new Worker(workerOptions);\n  }\n}\n\nvar _default = WorkerPool;\nexports.default = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvV29ya2VyUG9vbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlOztBQUVmLDZDQUE2QyxtQkFBTyxDQUFDLHNGQUF1Qjs7QUFFNUU7QUFDQSx3Q0FBd0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksbUJBQU8sQ0FBQyw2SUFBZ0I7O0FBRTVCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSwrSEFBOEM7QUFDN0QsTUFBTTtBQUNOLGVBQWUsaUlBQStDO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbS1sZXZpdHkvLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvV29ya2VyUG9vbC5qcz80NjY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfQmFzZVdvcmtlclBvb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vYmFzZS9CYXNlV29ya2VyUG9vbCcpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBjYW5Vc2VXb3JrZXJUaHJlYWRzID0gKCkgPT4ge1xuICB0cnkge1xuICAgIHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJyk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jbGFzcyBXb3JrZXJQb29sIGV4dGVuZHMgX0Jhc2VXb3JrZXJQb29sLmRlZmF1bHQge1xuICBzZW5kKHdvcmtlcklkLCByZXF1ZXN0LCBvblN0YXJ0LCBvbkVuZCwgb25DdXN0b21NZXNzYWdlKSB7XG4gICAgdGhpcy5nZXRXb3JrZXJCeUlkKHdvcmtlcklkKS5zZW5kKHJlcXVlc3QsIG9uU3RhcnQsIG9uRW5kLCBvbkN1c3RvbU1lc3NhZ2UpO1xuICB9XG5cbiAgY3JlYXRlV29ya2VyKHdvcmtlck9wdGlvbnMpIHtcbiAgICBsZXQgV29ya2VyO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuZW5hYmxlV29ya2VyVGhyZWFkcyAmJiBjYW5Vc2VXb3JrZXJUaHJlYWRzKCkpIHtcbiAgICAgIFdvcmtlciA9IHJlcXVpcmUoJy4vd29ya2Vycy9Ob2RlVGhyZWFkc1dvcmtlcicpLmRlZmF1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdvcmtlciA9IHJlcXVpcmUoJy4vd29ya2Vycy9DaGlsZFByb2Nlc3NXb3JrZXInKS5kZWZhdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHdvcmtlck9wdGlvbnMpO1xuICB9XG59XG5cbnZhciBfZGVmYXVsdCA9IFdvcmtlclBvb2w7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/WorkerPool.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/base/BaseWorkerPool.js":
/*!***************************************************************!*\
  !*** ./node_modules/jest-worker/build/base/BaseWorkerPool.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(__webpack_require__(/*! merge-stream */ \"./node_modules/merge-stream/index.js\"));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = __webpack_require__(/*! ../types */ \"./node_modules/jest-worker/build/types.js\");\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// How long to wait for the child process to terminate\n// after CHILD_MESSAGE_END before sending force exiting.\nconst FORCE_EXIT_DELAY = 500;\n/* istanbul ignore next */\n\nconst emptyMethod = () => {};\n\nclass BaseWorkerPool {\n  constructor(workerPath, options) {\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workers', void 0);\n\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n\n    if (!path().isAbsolute(workerPath)) {\n      workerPath = /*require.resolve*/(__webpack_require__(\"./node_modules/jest-worker/build/base sync recursive\").resolve(workerPath));\n    }\n\n    const stdout = (0, _mergeStream().default)();\n    const stderr = (0, _mergeStream().default)();\n    const {forkOptions, maxRetries, resourceLimits, setupArgs} = options;\n\n    for (let i = 0; i < options.numWorkers; i++) {\n      const workerOptions = {\n        forkOptions,\n        maxRetries,\n        resourceLimits,\n        setupArgs,\n        workerId: i,\n        workerPath\n      };\n      const worker = this.createWorker(workerOptions);\n      const workerStdout = worker.getStdout();\n      const workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getWorkers() {\n    return this._workers;\n  }\n\n  getWorkerById(workerId) {\n    return this._workers[workerId];\n  }\n\n  createWorker(_workerOptions) {\n    throw Error('Missing method createWorker in WorkerPool');\n  }\n\n  async end() {\n    // We do not cache the request object here. If so, it would only be only\n    // processed by one of the workers, and we want them all to close.\n    const workerExitPromises = this._workers.map(async worker => {\n      worker.send(\n        [_types().CHILD_MESSAGE_END, false],\n        emptyMethod,\n        emptyMethod,\n        emptyMethod\n      ); // Schedule a force exit in case worker fails to exit gracefully so\n      // await worker.waitForExit() never takes longer than FORCE_EXIT_DELAY\n\n      let forceExited = false;\n      const forceExitTimeout = setTimeout(() => {\n        worker.forceExit();\n        forceExited = true;\n      }, FORCE_EXIT_DELAY);\n      await worker.waitForExit(); // Worker ideally exited gracefully, don't send force exit then\n\n      clearTimeout(forceExitTimeout);\n      return forceExited;\n    });\n\n    const workerExits = await Promise.all(workerExitPromises);\n    return workerExits.reduce(\n      (result, forceExited) => ({\n        forceExited: result.forceExited || forceExited\n      }),\n      {\n        forceExited: false\n      }\n    );\n  }\n}\n\nexports.default = BaseWorkerPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/base/BaseWorkerPool.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/index.js":
/*!*************************************************!*\
  !*** ./node_modules/jest-worker/build/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"PriorityQueue\", ({\n  enumerable: true,\n  get: function () {\n    return _PriorityQueue.default;\n  }\n}));\nObject.defineProperty(exports, \"FifoQueue\", ({\n  enumerable: true,\n  get: function () {\n    return _FifoQueue.default;\n  }\n}));\nObject.defineProperty(exports, \"messageParent\", ({\n  enumerable: true,\n  get: function () {\n    return _messageParent.default;\n  }\n}));\nexports.Worker = void 0;\n\nfunction _os() {\n  const data = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'os'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Farm = _interopRequireDefault(__webpack_require__(/*! ./Farm */ \"./node_modules/jest-worker/build/Farm.js\"));\n\nvar _WorkerPool = _interopRequireDefault(__webpack_require__(/*! ./WorkerPool */ \"./node_modules/jest-worker/build/WorkerPool.js\"));\n\nvar _PriorityQueue = _interopRequireDefault(__webpack_require__(/*! ./PriorityQueue */ \"./node_modules/jest-worker/build/PriorityQueue.js\"));\n\nvar _FifoQueue = _interopRequireDefault(__webpack_require__(/*! ./FifoQueue */ \"./node_modules/jest-worker/build/FifoQueue.js\"));\n\nvar _messageParent = _interopRequireDefault(__webpack_require__(/*! ./workers/messageParent */ \"./node_modules/jest-worker/build/workers/messageParent.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  let exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    const module = __webpack_require__(\"./node_modules/jest-worker/build sync recursive\")(workerPath);\n\n    exposedMethods = Object.keys(module).filter(\n      // @ts-expect-error: no index\n      name => typeof module[name] === 'function'\n    );\n\n    if (typeof module === 'function') {\n      exposedMethods = [...exposedMethods, 'default'];\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\nclass Worker {\n  constructor(workerPath, options) {\n    var _this$_options$enable,\n      _this$_options$forkOp,\n      _this$_options$maxRet,\n      _this$_options$numWor,\n      _this$_options$resour,\n      _this$_options$setupA;\n\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = {...options};\n    this._ending = false;\n    const workerPoolOptions = {\n      enableWorkerThreads:\n        (_this$_options$enable = this._options.enableWorkerThreads) !== null &&\n        _this$_options$enable !== void 0\n          ? _this$_options$enable\n          : false,\n      forkOptions:\n        (_this$_options$forkOp = this._options.forkOptions) !== null &&\n        _this$_options$forkOp !== void 0\n          ? _this$_options$forkOp\n          : {},\n      maxRetries:\n        (_this$_options$maxRet = this._options.maxRetries) !== null &&\n        _this$_options$maxRet !== void 0\n          ? _this$_options$maxRet\n          : 3,\n      numWorkers:\n        (_this$_options$numWor = this._options.numWorkers) !== null &&\n        _this$_options$numWor !== void 0\n          ? _this$_options$numWor\n          : Math.max((0, _os().cpus)().length - 1, 1),\n      resourceLimits:\n        (_this$_options$resour = this._options.resourceLimits) !== null &&\n        _this$_options$resour !== void 0\n          ? _this$_options$resour\n          : {},\n      setupArgs:\n        (_this$_options$setupA = this._options.setupArgs) !== null &&\n        _this$_options$setupA !== void 0\n          ? _this$_options$setupA\n          : []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-expect-error: constructor target any?\n      this._workerPool = new this._options.WorkerPool(\n        workerPath,\n        workerPoolOptions\n      );\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(\n      workerPoolOptions.numWorkers,\n      this._workerPool.send.bind(this._workerPool),\n      {\n        computeWorkerKey: this._options.computeWorkerKey,\n        taskQueue: this._options.taskQueue,\n        workerSchedulingPolicy: this._options.workerSchedulingPolicy\n      }\n    );\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _bindExposedWorkerMethods(workerPath, options) {\n    getExposedMethods(workerPath, options).forEach(name => {\n      if (name.startsWith('_')) {\n        return;\n      }\n\n      if (this.constructor.prototype.hasOwnProperty(name)) {\n        throw new TypeError('Cannot define a method called ' + name);\n      } // @ts-expect-error: dynamic extension of the class instance is expected.\n\n      this[name] = this._callFunctionWithArgs.bind(this, name);\n    });\n  }\n\n  _callFunctionWithArgs(method, ...args) {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    return this._farm.doWork(method, ...args);\n  }\n\n  getStderr() {\n    return this._workerPool.getStderr();\n  }\n\n  getStdout() {\n    return this._workerPool.getStdout();\n  }\n\n  async end() {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    this._ending = true;\n    return this._workerPool.end();\n  }\n}\n\nexports.Worker = Worker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/index.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/types.js":
/*!*************************************************!*\
  !*** ./node_modules/jest-worker/build/types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PARENT_MESSAGE_CUSTOM =\n  exports.PARENT_MESSAGE_SETUP_ERROR =\n  exports.PARENT_MESSAGE_CLIENT_ERROR =\n  exports.PARENT_MESSAGE_OK =\n  exports.CHILD_MESSAGE_END =\n  exports.CHILD_MESSAGE_CALL =\n  exports.CHILD_MESSAGE_INITIALIZE =\n    void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// import type {ResourceLimits} from 'worker_threads';\n// This is not present in the Node 12 typings\n// Because of the dynamic nature of a worker communication process, all messages\n// coming from any of the other processes cannot be typed. Thus, many types\n// include \"unknown\" as a TS type, which is (unfortunately) correct here.\nconst CHILD_MESSAGE_INITIALIZE = 0;\nexports.CHILD_MESSAGE_INITIALIZE = CHILD_MESSAGE_INITIALIZE;\nconst CHILD_MESSAGE_CALL = 1;\nexports.CHILD_MESSAGE_CALL = CHILD_MESSAGE_CALL;\nconst CHILD_MESSAGE_END = 2;\nexports.CHILD_MESSAGE_END = CHILD_MESSAGE_END;\nconst PARENT_MESSAGE_OK = 0;\nexports.PARENT_MESSAGE_OK = PARENT_MESSAGE_OK;\nconst PARENT_MESSAGE_CLIENT_ERROR = 1;\nexports.PARENT_MESSAGE_CLIENT_ERROR = PARENT_MESSAGE_CLIENT_ERROR;\nconst PARENT_MESSAGE_SETUP_ERROR = 2;\nexports.PARENT_MESSAGE_SETUP_ERROR = PARENT_MESSAGE_SETUP_ERROR;\nconst PARENT_MESSAGE_CUSTOM = 3;\nexports.PARENT_MESSAGE_CUSTOM = PARENT_MESSAGE_CUSTOM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvdHlwZXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNkJBQTZCO0FBQzdCLEVBQUUsa0NBQWtDO0FBQ3BDLEVBQUUsbUNBQW1DO0FBQ3JDLEVBQUUseUJBQXlCO0FBQzNCLEVBQUUseUJBQXlCO0FBQzNCLEVBQUUsMEJBQTBCO0FBQzVCLEVBQUUsZ0NBQWdDO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLG1DQUFtQztBQUNuQztBQUNBLGtDQUFrQztBQUNsQztBQUNBLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9qZXN0LXdvcmtlci9idWlsZC90eXBlcy5qcz80NWI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBBUkVOVF9NRVNTQUdFX0NVU1RPTSA9XG4gIGV4cG9ydHMuUEFSRU5UX01FU1NBR0VfU0VUVVBfRVJST1IgPVxuICBleHBvcnRzLlBBUkVOVF9NRVNTQUdFX0NMSUVOVF9FUlJPUiA9XG4gIGV4cG9ydHMuUEFSRU5UX01FU1NBR0VfT0sgPVxuICBleHBvcnRzLkNISUxEX01FU1NBR0VfRU5EID1cbiAgZXhwb3J0cy5DSElMRF9NRVNTQUdFX0NBTEwgPVxuICBleHBvcnRzLkNISUxEX01FU1NBR0VfSU5JVElBTElaRSA9XG4gICAgdm9pZCAwO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vLyBpbXBvcnQgdHlwZSB7UmVzb3VyY2VMaW1pdHN9IGZyb20gJ3dvcmtlcl90aHJlYWRzJztcbi8vIFRoaXMgaXMgbm90IHByZXNlbnQgaW4gdGhlIE5vZGUgMTIgdHlwaW5nc1xuLy8gQmVjYXVzZSBvZiB0aGUgZHluYW1pYyBuYXR1cmUgb2YgYSB3b3JrZXIgY29tbXVuaWNhdGlvbiBwcm9jZXNzLCBhbGwgbWVzc2FnZXNcbi8vIGNvbWluZyBmcm9tIGFueSBvZiB0aGUgb3RoZXIgcHJvY2Vzc2VzIGNhbm5vdCBiZSB0eXBlZC4gVGh1cywgbWFueSB0eXBlc1xuLy8gaW5jbHVkZSBcInVua25vd25cIiBhcyBhIFRTIHR5cGUsIHdoaWNoIGlzICh1bmZvcnR1bmF0ZWx5KSBjb3JyZWN0IGhlcmUuXG5jb25zdCBDSElMRF9NRVNTQUdFX0lOSVRJQUxJWkUgPSAwO1xuZXhwb3J0cy5DSElMRF9NRVNTQUdFX0lOSVRJQUxJWkUgPSBDSElMRF9NRVNTQUdFX0lOSVRJQUxJWkU7XG5jb25zdCBDSElMRF9NRVNTQUdFX0NBTEwgPSAxO1xuZXhwb3J0cy5DSElMRF9NRVNTQUdFX0NBTEwgPSBDSElMRF9NRVNTQUdFX0NBTEw7XG5jb25zdCBDSElMRF9NRVNTQUdFX0VORCA9IDI7XG5leHBvcnRzLkNISUxEX01FU1NBR0VfRU5EID0gQ0hJTERfTUVTU0FHRV9FTkQ7XG5jb25zdCBQQVJFTlRfTUVTU0FHRV9PSyA9IDA7XG5leHBvcnRzLlBBUkVOVF9NRVNTQUdFX09LID0gUEFSRU5UX01FU1NBR0VfT0s7XG5jb25zdCBQQVJFTlRfTUVTU0FHRV9DTElFTlRfRVJST1IgPSAxO1xuZXhwb3J0cy5QQVJFTlRfTUVTU0FHRV9DTElFTlRfRVJST1IgPSBQQVJFTlRfTUVTU0FHRV9DTElFTlRfRVJST1I7XG5jb25zdCBQQVJFTlRfTUVTU0FHRV9TRVRVUF9FUlJPUiA9IDI7XG5leHBvcnRzLlBBUkVOVF9NRVNTQUdFX1NFVFVQX0VSUk9SID0gUEFSRU5UX01FU1NBR0VfU0VUVVBfRVJST1I7XG5jb25zdCBQQVJFTlRfTUVTU0FHRV9DVVNUT00gPSAzO1xuZXhwb3J0cy5QQVJFTlRfTUVTU0FHRV9DVVNUT00gPSBQQVJFTlRfTUVTU0FHRV9DVVNUT007XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/types.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/workers/ChildProcessWorker.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jest-worker/build/workers/ChildProcessWorker.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'child_process'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(__webpack_require__(/*! merge-stream */ \"./node_modules/merge-stream/index.js\"));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  const data = __webpack_require__(/*! supports-color */ \"./node_modules/jest-worker/node_modules/supports-color/browser.js\");\n\n  _supportsColor = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = __webpack_require__(/*! ../types */ \"./node_modules/jest-worker/build/types.js\");\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst SIGNAL_BASE_EXIT_CODE = 128;\nconst SIGKILL_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 9;\nconst SIGTERM_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 15; // How long to wait after SIGTERM before sending SIGKILL\n\nconst SIGKILL_DELAY = 500;\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\n\nclass ChildProcessWorker {\n  constructor(options) {\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this.initialize();\n  }\n\n  initialize() {\n    const forceColor = _supportsColor().stdout\n      ? {\n          FORCE_COLOR: '1'\n        }\n      : {};\n    const child = (0, _child_process().fork)(\n      /*require.resolve*/(/*! ./processChild */ \"./node_modules/jest-worker/build/workers/processChild.js\"),\n      [],\n      {\n        cwd: process.cwd(),\n        env: {\n          ...process.env,\n          JEST_WORKER_ID: String(this._options.workerId + 1),\n          // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n          ...forceColor\n        },\n        // Suppress --debug / --inspect flags while preserving others (like --harmony).\n        execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n        silent: true,\n        ...this._options.forkOptions\n      }\n    );\n\n    if (child.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(child.stdout);\n    }\n\n    if (child.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(child.stderr);\n    }\n\n    child.on('message', this._onMessage.bind(this));\n    child.on('exit', this._onExit.bind(this));\n    child.send([\n      _types().CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n    this._child = child;\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error(\n        `Jest worker encountered ${this._retries} child process exceptions, exceeding retry limit`\n      );\n\n      this._onMessage([\n        _types().PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the temporary streams so the merged streams end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    // TODO: Add appropriate type check\n    let error;\n\n    switch (response[0]) {\n      case _types().PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = __webpack_require__.g[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]);\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (\n      exitCode !== 0 &&\n      exitCode !== null &&\n      exitCode !== SIGTERM_EXIT_CODE &&\n      exitCode !== SIGKILL_EXIT_CODE\n    ) {\n      this.initialize();\n\n      if (this._request) {\n        this._child.send(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      return onProcessEnd(...args);\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._child.send(request, () => {});\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._child.kill('SIGTERM');\n\n    const sigkillTimeout = setTimeout(\n      () => this._child.kill('SIGKILL'),\n      SIGKILL_DELAY\n    );\n\n    this._exitPromise.then(() => clearTimeout(sigkillTimeout));\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ChildProcessWorker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/workers/ChildProcessWorker.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/workers/NodeThreadsWorker.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jest-worker/build/workers/NodeThreadsWorker.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  const data = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'worker_threads'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  _worker_threads = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(__webpack_require__(/*! merge-stream */ \"./node_modules/merge-stream/index.js\"));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = __webpack_require__(/*! ../types */ \"./node_modules/jest-worker/build/types.js\");\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ExperimentalWorker {\n  constructor(options) {\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    _defineProperty(this, '_forceExited', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this._forceExited = false;\n    this.initialize();\n  }\n\n  initialize() {\n    this._worker = new (_worker_threads().Worker)(\n      path().resolve(__dirname, './threadChild.js'),\n      {\n        eval: false,\n        // @ts-expect-error: added in newer versions\n        resourceLimits: this._options.resourceLimits,\n        stderr: true,\n        stdout: true,\n        workerData: {\n          cwd: process.cwd(),\n          env: {\n            ...process.env,\n            JEST_WORKER_ID: String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n          },\n          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n          execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n          silent: true,\n          ...this._options.forkOptions\n        }\n      }\n    );\n\n    if (this._worker.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(this._worker.stdout);\n    }\n\n    if (this._worker.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(this._worker.stderr);\n    }\n\n    this._worker.on('message', this._onMessage.bind(this));\n\n    this._worker.on('exit', this._onExit.bind(this));\n\n    this._worker.postMessage([\n      _types().CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n\n      this._onMessage([\n        _types().PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the permanent stream so the merged stream end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types().PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = __webpack_require__.g[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-expect-error: no index\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-expect-error: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (exitCode !== 0 && !this._forceExited) {\n      this.initialize();\n\n      if (this._request) {\n        this._worker.postMessage(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._forceExited = true;\n\n    this._worker.terminate();\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      var _onProcessEnd;\n\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      const res =\n        (_onProcessEnd = onProcessEnd) === null || _onProcessEnd === void 0\n          ? void 0\n          : _onProcessEnd(...args); // Clean up the reference so related closures can be garbage collected.\n\n      onProcessEnd = null;\n      return res;\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._worker.postMessage(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ExperimentalWorker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/workers/NodeThreadsWorker.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/workers/messageParent.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jest-worker/build/workers/messageParent.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = messageParent;\n\nfunction _types() {\n  const data = __webpack_require__(/*! ../types */ \"./node_modules/jest-worker/build/types.js\");\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isWorkerThread = (() => {\n  try {\n    // `Require` here to support Node v10\n    const {isMainThread, parentPort} = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'worker_threads'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n    return !isMainThread && parentPort != null;\n  } catch {\n    return false;\n  }\n})();\n\nfunction messageParent(message, parentProcess = process) {\n  if (isWorkerThread) {\n    // `Require` here to support Node v10\n    const {parentPort} = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'worker_threads'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())); // ! is safe due to `null` check in `isWorkerThread`\n\n    parentPort.postMessage([_types().PARENT_MESSAGE_CUSTOM, message]);\n  } else if (typeof parentProcess.send === 'function') {\n    parentProcess.send([_types().PARENT_MESSAGE_CUSTOM, message]);\n  } else {\n    throw new Error('\"messageParent\" can only be used inside a worker');\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvd29ya2Vycy9tZXNzYWdlUGFyZW50LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWY7QUFDQSxlQUFlLG1CQUFPLENBQUMsMkRBQVU7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEJBQTBCLEVBQUUsbUJBQU8sQ0FBQyw2SUFBZ0I7O0FBRS9EO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWSxFQUFFLG1CQUFPLENBQUMsNklBQWdCLEdBQUc7O0FBRXBEO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9qZXN0LXdvcmtlci9idWlsZC93b3JrZXJzL21lc3NhZ2VQYXJlbnQuanM/NTQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWVzc2FnZVBhcmVudDtcblxuZnVuY3Rpb24gX3R5cGVzKCkge1xuICBjb25zdCBkYXRhID0gcmVxdWlyZSgnLi4vdHlwZXMnKTtcblxuICBfdHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmNvbnN0IGlzV29ya2VyVGhyZWFkID0gKCgpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBgUmVxdWlyZWAgaGVyZSB0byBzdXBwb3J0IE5vZGUgdjEwXG4gICAgY29uc3Qge2lzTWFpblRocmVhZCwgcGFyZW50UG9ydH0gPSByZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpO1xuXG4gICAgcmV0dXJuICFpc01haW5UaHJlYWQgJiYgcGFyZW50UG9ydCAhPSBudWxsO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIG1lc3NhZ2VQYXJlbnQobWVzc2FnZSwgcGFyZW50UHJvY2VzcyA9IHByb2Nlc3MpIHtcbiAgaWYgKGlzV29ya2VyVGhyZWFkKSB7XG4gICAgLy8gYFJlcXVpcmVgIGhlcmUgdG8gc3VwcG9ydCBOb2RlIHYxMFxuICAgIGNvbnN0IHtwYXJlbnRQb3J0fSA9IHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJyk7IC8vICEgaXMgc2FmZSBkdWUgdG8gYG51bGxgIGNoZWNrIGluIGBpc1dvcmtlclRocmVhZGBcblxuICAgIHBhcmVudFBvcnQucG9zdE1lc3NhZ2UoW190eXBlcygpLlBBUkVOVF9NRVNTQUdFX0NVU1RPTSwgbWVzc2FnZV0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJlbnRQcm9jZXNzLnNlbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwYXJlbnRQcm9jZXNzLnNlbmQoW190eXBlcygpLlBBUkVOVF9NRVNTQUdFX0NVU1RPTSwgbWVzc2FnZV0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJtZXNzYWdlUGFyZW50XCIgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSB3b3JrZXInKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/workers/messageParent.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/build/workers/processChild.js":
/*!****************************************************************!*\
  !*** ./node_modules/jest-worker/build/workers/processChild.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _types() {\n  const data = __webpack_require__(/*! ../types */ \"./node_modules/jest-worker/build/types.js\");\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nlet file = null;\nlet setupArgs = [];\nlet initialized = false;\n/**\n * This file is a small bootstrapper for workers. It sets up the communication\n * between the worker and the parent process, interpreting parent messages and\n * sending results back.\n *\n * The file loaded will be lazily initialized the first time any of the workers\n * is called. This is done for optimal performance: if the farm is initialized,\n * but no call is made to it, child Node processes will be consuming the least\n * possible amount of memory.\n *\n * If an invalid message is detected, the child will exit (by throwing) with a\n * non-zero exit code.\n */\n\nconst messageListener = request => {\n  switch (request[0]) {\n    case _types().CHILD_MESSAGE_INITIALIZE:\n      const init = request;\n      file = init[2];\n      setupArgs = request[3];\n      break;\n\n    case _types().CHILD_MESSAGE_CALL:\n      const call = request;\n      execMethod(call[2], call[3]);\n      break;\n\n    case _types().CHILD_MESSAGE_END:\n      end();\n      break;\n\n    default:\n      throw new TypeError(\n        'Unexpected request from parent process: ' + request[0]\n      );\n  }\n};\n\nprocess.on('message', messageListener);\n\nfunction reportSuccess(result) {\n  if (!process || !process.send) {\n    throw new Error('Child can only be used on a forked process');\n  }\n\n  process.send([_types().PARENT_MESSAGE_OK, result]);\n}\n\nfunction reportClientError(error) {\n  return reportError(error, _types().PARENT_MESSAGE_CLIENT_ERROR);\n}\n\nfunction reportInitializeError(error) {\n  return reportError(error, _types().PARENT_MESSAGE_SETUP_ERROR);\n}\n\nfunction reportError(error, type) {\n  if (!process || !process.send) {\n    throw new Error('Child can only be used on a forked process');\n  }\n\n  if (error == null) {\n    error = new Error('\"null\" or \"undefined\" thrown');\n  }\n\n  process.send([\n    type,\n    error.constructor && error.constructor.name,\n    error.message,\n    error.stack,\n    typeof error === 'object' ? {...error} : error\n  ]);\n}\n\nfunction end() {\n  const main = __webpack_require__(\"./node_modules/jest-worker/build/workers sync recursive\")(file);\n\n  if (!main.teardown) {\n    exitProcess();\n    return;\n  }\n\n  execFunction(main.teardown, main, [], exitProcess, exitProcess);\n}\n\nfunction exitProcess() {\n  // Clean up open handles so the process ideally exits gracefully\n  process.removeListener('message', messageListener);\n}\n\nfunction execMethod(method, args) {\n  const main = __webpack_require__(\"./node_modules/jest-worker/build/workers sync recursive\")(file);\n\n  let fn;\n\n  if (method === 'default') {\n    fn = main.__esModule ? main['default'] : main;\n  } else {\n    fn = main[method];\n  }\n\n  function execHelper() {\n    execFunction(fn, main, args, reportSuccess, reportClientError);\n  }\n\n  if (initialized || !main.setup) {\n    execHelper();\n    return;\n  }\n\n  initialized = true;\n  execFunction(main.setup, main, setupArgs, execHelper, reportInitializeError);\n}\n\nconst isPromise = obj =>\n  !!obj &&\n  (typeof obj === 'object' || typeof obj === 'function') &&\n  typeof obj.then === 'function';\n\nfunction execFunction(fn, ctx, args, onResult, onError) {\n  let result;\n\n  try {\n    result = fn.apply(ctx, args);\n  } catch (err) {\n    onError(err);\n    return;\n  }\n\n  if (isPromise(result)) {\n    result.then(onResult, onError);\n  } else {\n    onResult(result);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvd29ya2Vycy9wcm9jZXNzQ2hpbGQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxlQUFlLG1CQUFPLENBQUMsMkRBQVU7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFVBQVU7QUFDM0M7QUFDQTs7QUFFQTtBQUNBLGVBQWUsK0VBQVEsSUFBSSxDQUFDOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSwrRUFBUSxJQUFJLENBQUM7O0FBRTVCOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbS1sZXZpdHkvLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvYnVpbGQvd29ya2Vycy9wcm9jZXNzQ2hpbGQuanM/YzljNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlcygpIHtcbiAgY29uc3QgZGF0YSA9IHJlcXVpcmUoJy4uL3R5cGVzJyk7XG5cbiAgX3R5cGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5sZXQgZmlsZSA9IG51bGw7XG5sZXQgc2V0dXBBcmdzID0gW107XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbi8qKlxuICogVGhpcyBmaWxlIGlzIGEgc21hbGwgYm9vdHN0cmFwcGVyIGZvciB3b3JrZXJzLiBJdCBzZXRzIHVwIHRoZSBjb21tdW5pY2F0aW9uXG4gKiBiZXR3ZWVuIHRoZSB3b3JrZXIgYW5kIHRoZSBwYXJlbnQgcHJvY2VzcywgaW50ZXJwcmV0aW5nIHBhcmVudCBtZXNzYWdlcyBhbmRcbiAqIHNlbmRpbmcgcmVzdWx0cyBiYWNrLlxuICpcbiAqIFRoZSBmaWxlIGxvYWRlZCB3aWxsIGJlIGxhemlseSBpbml0aWFsaXplZCB0aGUgZmlyc3QgdGltZSBhbnkgb2YgdGhlIHdvcmtlcnNcbiAqIGlzIGNhbGxlZC4gVGhpcyBpcyBkb25lIGZvciBvcHRpbWFsIHBlcmZvcm1hbmNlOiBpZiB0aGUgZmFybSBpcyBpbml0aWFsaXplZCxcbiAqIGJ1dCBubyBjYWxsIGlzIG1hZGUgdG8gaXQsIGNoaWxkIE5vZGUgcHJvY2Vzc2VzIHdpbGwgYmUgY29uc3VtaW5nIHRoZSBsZWFzdFxuICogcG9zc2libGUgYW1vdW50IG9mIG1lbW9yeS5cbiAqXG4gKiBJZiBhbiBpbnZhbGlkIG1lc3NhZ2UgaXMgZGV0ZWN0ZWQsIHRoZSBjaGlsZCB3aWxsIGV4aXQgKGJ5IHRocm93aW5nKSB3aXRoIGFcbiAqIG5vbi16ZXJvIGV4aXQgY29kZS5cbiAqL1xuXG5jb25zdCBtZXNzYWdlTGlzdGVuZXIgPSByZXF1ZXN0ID0+IHtcbiAgc3dpdGNoIChyZXF1ZXN0WzBdKSB7XG4gICAgY2FzZSBfdHlwZXMoKS5DSElMRF9NRVNTQUdFX0lOSVRJQUxJWkU6XG4gICAgICBjb25zdCBpbml0ID0gcmVxdWVzdDtcbiAgICAgIGZpbGUgPSBpbml0WzJdO1xuICAgICAgc2V0dXBBcmdzID0gcmVxdWVzdFszXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBfdHlwZXMoKS5DSElMRF9NRVNTQUdFX0NBTEw6XG4gICAgICBjb25zdCBjYWxsID0gcmVxdWVzdDtcbiAgICAgIGV4ZWNNZXRob2QoY2FsbFsyXSwgY2FsbFszXSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgX3R5cGVzKCkuQ0hJTERfTUVTU0FHRV9FTkQ6XG4gICAgICBlbmQoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdVbmV4cGVjdGVkIHJlcXVlc3QgZnJvbSBwYXJlbnQgcHJvY2VzczogJyArIHJlcXVlc3RbMF1cbiAgICAgICk7XG4gIH1cbn07XG5cbnByb2Nlc3Mub24oJ21lc3NhZ2UnLCBtZXNzYWdlTGlzdGVuZXIpO1xuXG5mdW5jdGlvbiByZXBvcnRTdWNjZXNzKHJlc3VsdCkge1xuICBpZiAoIXByb2Nlc3MgfHwgIXByb2Nlc3Muc2VuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2hpbGQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIGZvcmtlZCBwcm9jZXNzJyk7XG4gIH1cblxuICBwcm9jZXNzLnNlbmQoW190eXBlcygpLlBBUkVOVF9NRVNTQUdFX09LLCByZXN1bHRdKTtcbn1cblxuZnVuY3Rpb24gcmVwb3J0Q2xpZW50RXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIHJlcG9ydEVycm9yKGVycm9yLCBfdHlwZXMoKS5QQVJFTlRfTUVTU0FHRV9DTElFTlRfRVJST1IpO1xufVxuXG5mdW5jdGlvbiByZXBvcnRJbml0aWFsaXplRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIHJlcG9ydEVycm9yKGVycm9yLCBfdHlwZXMoKS5QQVJFTlRfTUVTU0FHRV9TRVRVUF9FUlJPUik7XG59XG5cbmZ1bmN0aW9uIHJlcG9ydEVycm9yKGVycm9yLCB0eXBlKSB7XG4gIGlmICghcHJvY2VzcyB8fCAhcHJvY2Vzcy5zZW5kKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDaGlsZCBjYW4gb25seSBiZSB1c2VkIG9uIGEgZm9ya2VkIHByb2Nlc3MnKTtcbiAgfVxuXG4gIGlmIChlcnJvciA9PSBudWxsKSB7XG4gICAgZXJyb3IgPSBuZXcgRXJyb3IoJ1wibnVsbFwiIG9yIFwidW5kZWZpbmVkXCIgdGhyb3duJyk7XG4gIH1cblxuICBwcm9jZXNzLnNlbmQoW1xuICAgIHR5cGUsXG4gICAgZXJyb3IuY29uc3RydWN0b3IgJiYgZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICBlcnJvci5tZXNzYWdlLFxuICAgIGVycm9yLnN0YWNrLFxuICAgIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgPyB7Li4uZXJyb3J9IDogZXJyb3JcbiAgXSk7XG59XG5cbmZ1bmN0aW9uIGVuZCgpIHtcbiAgY29uc3QgbWFpbiA9IHJlcXVpcmUoZmlsZSk7XG5cbiAgaWYgKCFtYWluLnRlYXJkb3duKSB7XG4gICAgZXhpdFByb2Nlc3MoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBleGVjRnVuY3Rpb24obWFpbi50ZWFyZG93biwgbWFpbiwgW10sIGV4aXRQcm9jZXNzLCBleGl0UHJvY2Vzcyk7XG59XG5cbmZ1bmN0aW9uIGV4aXRQcm9jZXNzKCkge1xuICAvLyBDbGVhbiB1cCBvcGVuIGhhbmRsZXMgc28gdGhlIHByb2Nlc3MgaWRlYWxseSBleGl0cyBncmFjZWZ1bGx5XG4gIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ21lc3NhZ2UnLCBtZXNzYWdlTGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiBleGVjTWV0aG9kKG1ldGhvZCwgYXJncykge1xuICBjb25zdCBtYWluID0gcmVxdWlyZShmaWxlKTtcblxuICBsZXQgZm47XG5cbiAgaWYgKG1ldGhvZCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgZm4gPSBtYWluLl9fZXNNb2R1bGUgPyBtYWluWydkZWZhdWx0J10gOiBtYWluO1xuICB9IGVsc2Uge1xuICAgIGZuID0gbWFpblttZXRob2RdO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhlY0hlbHBlcigpIHtcbiAgICBleGVjRnVuY3Rpb24oZm4sIG1haW4sIGFyZ3MsIHJlcG9ydFN1Y2Nlc3MsIHJlcG9ydENsaWVudEVycm9yKTtcbiAgfVxuXG4gIGlmIChpbml0aWFsaXplZCB8fCAhbWFpbi5zZXR1cCkge1xuICAgIGV4ZWNIZWxwZXIoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbml0aWFsaXplZCA9IHRydWU7XG4gIGV4ZWNGdW5jdGlvbihtYWluLnNldHVwLCBtYWluLCBzZXR1cEFyZ3MsIGV4ZWNIZWxwZXIsIHJlcG9ydEluaXRpYWxpemVFcnJvcik7XG59XG5cbmNvbnN0IGlzUHJvbWlzZSA9IG9iaiA9PlxuICAhIW9iaiAmJlxuICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiZcbiAgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBleGVjRnVuY3Rpb24oZm4sIGN0eCwgYXJncywgb25SZXN1bHQsIG9uRXJyb3IpIHtcbiAgbGV0IHJlc3VsdDtcblxuICB0cnkge1xuICAgIHJlc3VsdCA9IGZuLmFwcGx5KGN0eCwgYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRXJyb3IoZXJyKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICByZXN1bHQudGhlbihvblJlc3VsdCwgb25FcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgb25SZXN1bHQocmVzdWx0KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/build/workers/processChild.js\n");

/***/ }),

/***/ "./node_modules/jest-worker/node_modules/supports-color/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jest-worker/node_modules/supports-color/browser.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("/* eslint-env browser */\n\n\nfunction getChromeVersion() {\n\tconst matches = /(Chrome|Chromium)\\/(?<chromeVersion>\\d+)\\./.exec(navigator.userAgent);\n\n\tif (!matches) {\n\t\treturn;\n\t}\n\n\treturn Number.parseInt(matches.groups.chromeVersion, 10);\n}\n\nconst colorSupport = getChromeVersion() >= 69 ? {\n\tlevel: 1,\n\thasBasic: true,\n\thas256: false,\n\thas16m: false\n} : false;\n\nmodule.exports = {\n\tstdout: colorSupport,\n\tstderr: colorSupport\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamVzdC13b3JrZXIvbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2Jyb3dzZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW0tbGV2aXR5Ly4vbm9kZV9tb2R1bGVzL2plc3Qtd29ya2VyL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9icm93c2VyLmpzP2MyOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWVudiBicm93c2VyICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGdldENocm9tZVZlcnNpb24oKSB7XG5cdGNvbnN0IG1hdGNoZXMgPSAvKENocm9tZXxDaHJvbWl1bSlcXC8oPzxjaHJvbWVWZXJzaW9uPlxcZCspXFwuLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5cdGlmICghbWF0Y2hlcykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHJldHVybiBOdW1iZXIucGFyc2VJbnQobWF0Y2hlcy5ncm91cHMuY2hyb21lVmVyc2lvbiwgMTApO1xufVxuXG5jb25zdCBjb2xvclN1cHBvcnQgPSBnZXRDaHJvbWVWZXJzaW9uKCkgPj0gNjkgPyB7XG5cdGxldmVsOiAxLFxuXHRoYXNCYXNpYzogdHJ1ZSxcblx0aGFzMjU2OiBmYWxzZSxcblx0aGFzMTZtOiBmYWxzZVxufSA6IGZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3Rkb3V0OiBjb2xvclN1cHBvcnQsXG5cdHN0ZGVycjogY29sb3JTdXBwb3J0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/jest-worker/node_modules/supports-color/browser.js\n");

/***/ })

}]);