"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkecomm_levity"] = self["webpackChunkecomm_levity"] || []).push([["npm.chrome-trace-event"],{

/***/ "./node_modules/chrome-trace-event/dist/trace-event.js":
/*!*************************************************************!*\
  !*** ./node_modules/chrome-trace-event/dist/trace-event.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * trace-event - A library to create a trace of your node app per\n * Google's Trace Event format:\n * // JSSTYLED\n *      https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Tracer = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nfunction evCommon() {\n    var hrtime = process.hrtime(); // [seconds, nanoseconds]\n    var ts = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000); // microseconds\n    return {\n        ts,\n        pid: process.pid,\n        tid: process.pid // no meaningful tid for node.js\n    };\n}\nclass Tracer extends stream_1.Readable {\n    constructor(opts = {}) {\n        super();\n        this.noStream = false;\n        this.events = [];\n        if (typeof opts !== \"object\") {\n            throw new Error(\"Invalid options passed (must be an object)\");\n        }\n        if (opts.parent != null && typeof opts.parent !== \"object\") {\n            throw new Error(\"Invalid option (parent) passed (must be an object)\");\n        }\n        if (opts.fields != null && typeof opts.fields !== \"object\") {\n            throw new Error(\"Invalid option (fields) passed (must be an object)\");\n        }\n        if (opts.objectMode != null &&\n            (opts.objectMode !== true && opts.objectMode !== false)) {\n            throw new Error(\"Invalid option (objectsMode) passed (must be a boolean)\");\n        }\n        this.noStream = opts.noStream || false;\n        this.parent = opts.parent;\n        if (this.parent) {\n            this.fields = Object.assign({}, opts.parent && opts.parent.fields);\n        }\n        else {\n            this.fields = {};\n        }\n        if (opts.fields) {\n            Object.assign(this.fields, opts.fields);\n        }\n        if (!this.fields.cat) {\n            // trace-viewer *requires* `cat`, so let's have a fallback.\n            this.fields.cat = \"default\";\n        }\n        else if (Array.isArray(this.fields.cat)) {\n            this.fields.cat = this.fields.cat.join(\",\");\n        }\n        if (!this.fields.args) {\n            // trace-viewer *requires* `args`, so let's have a fallback.\n            this.fields.args = {};\n        }\n        if (this.parent) {\n            // TODO: Not calling Readable ctor here. Does that cause probs?\n            //      Probably if trying to pipe from the child.\n            //      Might want a serpate TracerChild class for these guys.\n            this._push = this.parent._push.bind(this.parent);\n        }\n        else {\n            this._objectMode = Boolean(opts.objectMode);\n            var streamOpts = { objectMode: this._objectMode };\n            if (this._objectMode) {\n                this._push = this.push;\n            }\n            else {\n                this._push = this._pushString;\n                streamOpts.encoding = \"utf8\";\n            }\n            stream_1.Readable.call(this, streamOpts);\n        }\n    }\n    /**\n     * If in no streamMode in order to flush out the trace\n     * you need to call flush.\n     */\n    flush() {\n        if (this.noStream === true) {\n            for (const evt of this.events) {\n                this._push(evt);\n            }\n            this._flush();\n        }\n    }\n    _read(_) { }\n    _pushString(ev) {\n        var separator = \"\";\n        if (!this.firstPush) {\n            this.push(\"[\");\n            this.firstPush = true;\n        }\n        else {\n            separator = \",\\n\";\n        }\n        this.push(separator + JSON.stringify(ev), \"utf8\");\n    }\n    _flush() {\n        if (!this._objectMode) {\n            this.push(\"]\");\n        }\n    }\n    child(fields) {\n        return new Tracer({\n            parent: this,\n            fields: fields\n        });\n    }\n    begin(fields) {\n        return this.mkEventFunc(\"b\")(fields);\n    }\n    end(fields) {\n        return this.mkEventFunc(\"e\")(fields);\n    }\n    completeEvent(fields) {\n        return this.mkEventFunc(\"X\")(fields);\n    }\n    instantEvent(fields) {\n        return this.mkEventFunc(\"I\")(fields);\n    }\n    mkEventFunc(ph) {\n        return (fields) => {\n            var ev = evCommon();\n            // Assign the event phase.\n            ev.ph = ph;\n            if (fields) {\n                if (typeof fields === \"string\") {\n                    ev.name = fields;\n                }\n                else {\n                    for (const k of Object.keys(fields)) {\n                        if (k === \"cat\") {\n                            ev.cat = fields.cat.join(\",\");\n                        }\n                        else {\n                            ev[k] = fields[k];\n                        }\n                    }\n                }\n            }\n            if (!this.noStream) {\n                this._push(ev);\n            }\n            else {\n                this.events.push(ev);\n            }\n        };\n    }\n}\nexports.Tracer = Tracer;\n/*\n * These correspond to the \"Async events\" in the Trace Events doc.\n *\n * Required fields:\n * - name\n * - id\n *\n * Optional fields:\n * - cat (array)\n * - args (object)\n * - TODO: stack fields, other optional fields?\n *\n * Dev Note: We don't explicitly assert that correct fields are\n * used for speed (premature optimization alert!).\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chrome-trace-event/dist/trace-event.js\n");

/***/ })

}]);