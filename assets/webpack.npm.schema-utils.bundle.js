"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkecomm_levity"] = self["webpackChunkecomm_levity"] || []).push([["npm.schema-utils"],{

/***/ "./node_modules/schema-utils/dist/ValidationError.js":
/*!***********************************************************!*\
  !*** ./node_modules/schema-utils/dist/ValidationError.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = __webpack_require__(/*! ./util/hints */ \"./node_modules/schema-utils/dist/util/hints.js\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case \"number\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${dataPath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          const max = limit + 1;\n          return `${dataPath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${dataPath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/ValidationError.js\n");

/***/ }),

/***/ "./node_modules/schema-utils/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/schema-utils/dist/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst {\n  validate,\n  ValidationError\n} = __webpack_require__(/*! ./validate */ \"./node_modules/schema-utils/dist/validate.js\");\n\nmodule.exports = {\n  validate,\n  ValidationError\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsZ0VBQVk7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW0tbGV2aXR5Ly4vbm9kZV9tb2R1bGVzL3NjaGVtYS11dGlscy9kaXN0L2luZGV4LmpzPzBiMWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHtcbiAgdmFsaWRhdGUsXG4gIFZhbGlkYXRpb25FcnJvclxufSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGUsXG4gIFZhbGlkYXRpb25FcnJvclxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/index.js\n");

/***/ }),

/***/ "./node_modules/schema-utils/dist/keywords/absolutePath.js":
/*!*****************************************************************!*\
  !*** ./node_modules/schema-utils/dist/keywords/absolutePath.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/** @typedef {import(\"ajv\").Ajv} Ajv */\n\n/** @typedef {import(\"ajv\").ValidateFunction} ValidateFunction */\n\n/** @typedef {import(\"../validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/**\n * @param {string} message\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\nfunction errorMessage(message, schema, data) {\n  return {\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    dataPath: undefined,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    schemaPath: undefined,\n    keyword: \"absolutePath\",\n    params: {\n      absolutePath: data\n    },\n    message,\n    parentSchema: schema\n  };\n}\n/**\n * @param {boolean} shouldBeAbsolute\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\n\n\nfunction getErrorFor(shouldBeAbsolute, schema, data) {\n  const message = shouldBeAbsolute ? `The provided value ${JSON.stringify(data)} is not an absolute path!` : `A relative path is expected. However, the provided value ${JSON.stringify(data)} is an absolute path!`;\n  return errorMessage(message, schema, data);\n}\n/**\n *\n * @param {Ajv} ajv\n * @returns {Ajv}\n */\n\n\nfunction addAbsolutePathKeyword(ajv) {\n  ajv.addKeyword(\"absolutePath\", {\n    errors: true,\n    type: \"string\",\n\n    compile(schema, parentSchema) {\n      /** @type {ValidateFunction} */\n      const callback = data => {\n        let passes = true;\n        const isExclamationMarkPresent = data.includes(\"!\");\n\n        if (isExclamationMarkPresent) {\n          callback.errors = [errorMessage(`The provided value ${JSON.stringify(data)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`, parentSchema, data)];\n          passes = false;\n        } // ?:[A-Za-z]:\\\\ - Windows absolute path\n        // \\\\\\\\ - Windows network absolute path\n        // \\/ - Unix-like OS absolute path\n\n\n        const isCorrectAbsolutePath = schema === /^(?:[A-Za-z]:(\\\\|\\/)|\\\\\\\\|\\/)/.test(data);\n\n        if (!isCorrectAbsolutePath) {\n          callback.errors = [getErrorFor(schema, parentSchema, data)];\n          passes = false;\n        }\n\n        return passes;\n      };\n\n      callback.errors = [];\n      return callback;\n    }\n\n  });\n  return ajv;\n}\n\nvar _default = addAbsolutePathKeyword;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3Qva2V5d29yZHMvYWJzb2x1dGVQYXRoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7O0FBRWYsY0FBYyxtQkFBbUI7O0FBRWpDLGNBQWMsZ0NBQWdDOztBQUU5QyxjQUFjLDZDQUE2Qzs7QUFFM0Q7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7OztBQUdBO0FBQ0EsMkRBQTJELHNCQUFzQix3RkFBd0Ysc0JBQXNCO0FBQy9MO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWE7QUFDYjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRSxzQkFBc0I7QUFDdEY7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW0tbGV2aXR5Ly4vbm9kZV9tb2R1bGVzL3NjaGVtYS11dGlscy9kaXN0L2tleXdvcmRzL2Fic29sdXRlUGF0aC5qcz9lMzg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydChcImFqdlwiKS5BanZ9IEFqdiAqL1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydChcImFqdlwiKS5WYWxpZGF0ZUZ1bmN0aW9ufSBWYWxpZGF0ZUZ1bmN0aW9uICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vdmFsaWRhdGVcIikuU2NoZW1hVXRpbEVycm9yT2JqZWN0fSBTY2hlbWFVdGlsRXJyb3JPYmplY3QgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFcbiAqIEByZXR1cm5zIHtTY2hlbWFVdGlsRXJyb3JPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGVycm9yTWVzc2FnZShtZXNzYWdlLCBzY2hlbWEsIGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICAgIGRhdGFQYXRoOiB1bmRlZmluZWQsXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgICBzY2hlbWFQYXRoOiB1bmRlZmluZWQsXG4gICAga2V5d29yZDogXCJhYnNvbHV0ZVBhdGhcIixcbiAgICBwYXJhbXM6IHtcbiAgICAgIGFic29sdXRlUGF0aDogZGF0YVxuICAgIH0sXG4gICAgbWVzc2FnZSxcbiAgICBwYXJlbnRTY2hlbWE6IHNjaGVtYVxuICB9O1xufVxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZEJlQWJzb2x1dGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhXG4gKiBAcmV0dXJucyB7U2NoZW1hVXRpbEVycm9yT2JqZWN0fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0RXJyb3JGb3Ioc2hvdWxkQmVBYnNvbHV0ZSwgc2NoZW1hLCBkYXRhKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBzaG91bGRCZUFic29sdXRlID8gYFRoZSBwcm92aWRlZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGRhdGEpfSBpcyBub3QgYW4gYWJzb2x1dGUgcGF0aCFgIDogYEEgcmVsYXRpdmUgcGF0aCBpcyBleHBlY3RlZC4gSG93ZXZlciwgdGhlIHByb3ZpZGVkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9IGlzIGFuIGFic29sdXRlIHBhdGghYDtcbiAgcmV0dXJuIGVycm9yTWVzc2FnZShtZXNzYWdlLCBzY2hlbWEsIGRhdGEpO1xufVxuLyoqXG4gKlxuICogQHBhcmFtIHtBanZ9IGFqdlxuICogQHJldHVybnMge0Fqdn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGFkZEFic29sdXRlUGF0aEtleXdvcmQoYWp2KSB7XG4gIGFqdi5hZGRLZXl3b3JkKFwiYWJzb2x1dGVQYXRoXCIsIHtcbiAgICBlcnJvcnM6IHRydWUsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcblxuICAgIGNvbXBpbGUoc2NoZW1hLCBwYXJlbnRTY2hlbWEpIHtcbiAgICAgIC8qKiBAdHlwZSB7VmFsaWRhdGVGdW5jdGlvbn0gKi9cbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gZGF0YSA9PiB7XG4gICAgICAgIGxldCBwYXNzZXMgPSB0cnVlO1xuICAgICAgICBjb25zdCBpc0V4Y2xhbWF0aW9uTWFya1ByZXNlbnQgPSBkYXRhLmluY2x1ZGVzKFwiIVwiKTtcblxuICAgICAgICBpZiAoaXNFeGNsYW1hdGlvbk1hcmtQcmVzZW50KSB7XG4gICAgICAgICAgY2FsbGJhY2suZXJyb3JzID0gW2Vycm9yTWVzc2FnZShgVGhlIHByb3ZpZGVkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9IGNvbnRhaW5zIGV4Y2xhbWF0aW9uIG1hcmsgKCEpIHdoaWNoIGlzIG5vdCBhbGxvd2VkIGJlY2F1c2UgaXQncyByZXNlcnZlZCBmb3IgbG9hZGVyIHN5bnRheC5gLCBwYXJlbnRTY2hlbWEsIGRhdGEpXTtcbiAgICAgICAgICBwYXNzZXMgPSBmYWxzZTtcbiAgICAgICAgfSAvLyA/OltBLVphLXpdOlxcXFwgLSBXaW5kb3dzIGFic29sdXRlIHBhdGhcbiAgICAgICAgLy8gXFxcXFxcXFwgLSBXaW5kb3dzIG5ldHdvcmsgYWJzb2x1dGUgcGF0aFxuICAgICAgICAvLyBcXC8gLSBVbml4LWxpa2UgT1MgYWJzb2x1dGUgcGF0aFxuXG5cbiAgICAgICAgY29uc3QgaXNDb3JyZWN0QWJzb2x1dGVQYXRoID0gc2NoZW1hID09PSAvXig/OltBLVphLXpdOihcXFxcfFxcLyl8XFxcXFxcXFx8XFwvKS8udGVzdChkYXRhKTtcblxuICAgICAgICBpZiAoIWlzQ29ycmVjdEFic29sdXRlUGF0aCkge1xuICAgICAgICAgIGNhbGxiYWNrLmVycm9ycyA9IFtnZXRFcnJvckZvcihzY2hlbWEsIHBhcmVudFNjaGVtYSwgZGF0YSldO1xuICAgICAgICAgIHBhc3NlcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhc3NlcztcbiAgICAgIH07XG5cbiAgICAgIGNhbGxiYWNrLmVycm9ycyA9IFtdO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH1cblxuICB9KTtcbiAgcmV0dXJuIGFqdjtcbn1cblxudmFyIF9kZWZhdWx0ID0gYWRkQWJzb2x1dGVQYXRoS2V5d29yZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/keywords/absolutePath.js\n");

/***/ }),

/***/ "./node_modules/schema-utils/dist/util/Range.js":
/*!******************************************************!*\
  !*** ./node_modules/schema-utils/dist/util/Range.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n\n/**\n * @typedef {[number, boolean]} RangeValue\n */\n\n/**\n * @callback RangeValueCallback\n * @param {RangeValue} rangeValue\n * @returns {boolean}\n */\nclass Range {\n  /**\n   * @param {\"left\" | \"right\"} side\n   * @param {boolean} exclusive\n   * @returns {\">\" | \">=\" | \"<\" | \"<=\"}\n   */\n  static getOperator(side, exclusive) {\n    if (side === \"left\") {\n      return exclusive ? \">\" : \">=\";\n    }\n\n    return exclusive ? \"<\" : \"<=\";\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatRight(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatLeft(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator(\"right\", exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatLeft(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatRight(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator(\"left\", exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} start left side value\n   * @param {number} end right side value\n   * @param {boolean} startExclusive is range exclusive from left side\n   * @param {boolean} endExclusive is range exclusive from right side\n   * @param {boolean} logic is not logic applied\n   * @returns {string}\n   */\n\n\n  static formatRange(start, end, startExclusive, endExclusive, logic) {\n    let result = \"should be\";\n    result += ` ${Range.getOperator(logic ? \"left\" : \"right\", logic ? startExclusive : !startExclusive)} ${start} `;\n    result += logic ? \"and\" : \"or\";\n    result += ` ${Range.getOperator(logic ? \"right\" : \"left\", logic ? endExclusive : !endExclusive)} ${end}`;\n    return result;\n  }\n  /**\n   * @param {Array<RangeValue>} values\n   * @param {boolean} logic is not logic applied\n   * @return {RangeValue} computed value and it's exclusive flag\n   */\n\n\n  static getRangeValue(values, logic) {\n    let minMax = logic ? Infinity : -Infinity;\n    let j = -1;\n    const predicate = logic ?\n    /** @type {RangeValueCallback} */\n    ([value]) => value <= minMax :\n    /** @type {RangeValueCallback} */\n    ([value]) => value >= minMax;\n\n    for (let i = 0; i < values.length; i++) {\n      if (predicate(values[i])) {\n        [minMax] = values[i];\n        j = i;\n      }\n    }\n\n    if (j > -1) {\n      return values[j];\n    }\n\n    return [Infinity, true];\n  }\n\n  constructor() {\n    /** @type {Array<RangeValue>} */\n    this._left = [];\n    /** @type {Array<RangeValue>} */\n\n    this._right = [];\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  left(value, exclusive = false) {\n    this._left.push([value, exclusive]);\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  right(value, exclusive = false) {\n    this._right.push([value, exclusive]);\n  }\n  /**\n   * @param {boolean} logic is not logic applied\n   * @return {string} \"smart\" range string representation\n   */\n\n\n  format(logic = true) {\n    const [start, leftExclusive] = Range.getRangeValue(this._left, logic);\n    const [end, rightExclusive] = Range.getRangeValue(this._right, !logic);\n\n    if (!Number.isFinite(start) && !Number.isFinite(end)) {\n      return \"\";\n    }\n\n    const realStart = leftExclusive ? start + 1 : start;\n    const realEnd = rightExclusive ? end - 1 : end; // e.g. 5 < x < 7, 5 < x <= 6, 6 <= x <= 6\n\n    if (realStart === realEnd) {\n      return `should be ${logic ? \"\" : \"!\"}= ${realStart}`;\n    } // e.g. 4 < x < ∞\n\n\n    if (Number.isFinite(start) && !Number.isFinite(end)) {\n      return Range.formatLeft(start, logic, leftExclusive);\n    } // e.g. ∞ < x < 4\n\n\n    if (!Number.isFinite(start) && Number.isFinite(end)) {\n      return Range.formatRight(end, logic, rightExclusive);\n    }\n\n    return Range.formatRange(start, end, leftExclusive, rightExclusive, logic);\n  }\n\n}\n\nmodule.exports = Range;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvdXRpbC9SYW5nZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CLGFBQWEsU0FBUztBQUN0QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3Qix1Q0FBdUMsRUFBRSxNQUFNO0FBQ3ZFO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixzQ0FBc0MsRUFBRSxNQUFNO0FBQ3RFO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBLGtCQUFrQix1RkFBdUYsRUFBRSxPQUFPO0FBQ2xIO0FBQ0Esa0JBQWtCLG1GQUFtRixFQUFFLElBQUk7QUFDM0c7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBbUI7QUFDaEMsYUFBYSxTQUFTO0FBQ3RCLGNBQWMsWUFBWTtBQUMxQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBLGVBQWUsb0JBQW9CO0FBQ25DOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDO0FBQ0EsZUFBZSxtQkFBbUI7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2Qjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0RBQW9EOztBQUVwRDtBQUNBLDBCQUEwQixpQkFBaUIsSUFBSSxVQUFVO0FBQ3pELE1BQU07OztBQUdOO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9zY2hlbWEtdXRpbHMvZGlzdC91dGlsL1JhbmdlLmpzPzdjMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQHR5cGVkZWYge1tudW1iZXIsIGJvb2xlYW5dfSBSYW5nZVZhbHVlXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmFuZ2VWYWx1ZUNhbGxiYWNrXG4gKiBAcGFyYW0ge1JhbmdlVmFsdWV9IHJhbmdlVmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jbGFzcyBSYW5nZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1wibGVmdFwiIHwgXCJyaWdodFwifSBzaWRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhjbHVzaXZlXG4gICAqIEByZXR1cm5zIHtcIj5cIiB8IFwiPj1cIiB8IFwiPFwiIHwgXCI8PVwifVxuICAgKi9cbiAgc3RhdGljIGdldE9wZXJhdG9yKHNpZGUsIGV4Y2x1c2l2ZSkge1xuICAgIGlmIChzaWRlID09PSBcImxlZnRcIikge1xuICAgICAgcmV0dXJuIGV4Y2x1c2l2ZSA/IFwiPlwiIDogXCI+PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBleGNsdXNpdmUgPyBcIjxcIiA6IFwiPD1cIjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9naWMgaXMgbm90IGxvZ2ljIGFwcGxpZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBleGNsdXNpdmUgaXMgcmFuZ2UgZXhjbHVzaXZlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZvcm1hdFJpZ2h0KHZhbHVlLCBsb2dpYywgZXhjbHVzaXZlKSB7XG4gICAgaWYgKGxvZ2ljID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIFJhbmdlLmZvcm1hdExlZnQodmFsdWUsICFsb2dpYywgIWV4Y2x1c2l2ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBzaG91bGQgYmUgJHtSYW5nZS5nZXRPcGVyYXRvcihcInJpZ2h0XCIsIGV4Y2x1c2l2ZSl9ICR7dmFsdWV9YDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9naWMgaXMgbm90IGxvZ2ljIGFwcGxpZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBleGNsdXNpdmUgaXMgcmFuZ2UgZXhjbHVzaXZlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgc3RhdGljIGZvcm1hdExlZnQodmFsdWUsIGxvZ2ljLCBleGNsdXNpdmUpIHtcbiAgICBpZiAobG9naWMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gUmFuZ2UuZm9ybWF0UmlnaHQodmFsdWUsICFsb2dpYywgIWV4Y2x1c2l2ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBzaG91bGQgYmUgJHtSYW5nZS5nZXRPcGVyYXRvcihcImxlZnRcIiwgZXhjbHVzaXZlKX0gJHt2YWx1ZX1gO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgbGVmdCBzaWRlIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgcmlnaHQgc2lkZSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXJ0RXhjbHVzaXZlIGlzIHJhbmdlIGV4Y2x1c2l2ZSBmcm9tIGxlZnQgc2lkZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuZEV4Y2x1c2l2ZSBpcyByYW5nZSBleGNsdXNpdmUgZnJvbSByaWdodCBzaWRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9naWMgaXMgbm90IGxvZ2ljIGFwcGxpZWRcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG5cblxuICBzdGF0aWMgZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCwgc3RhcnRFeGNsdXNpdmUsIGVuZEV4Y2x1c2l2ZSwgbG9naWMpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJzaG91bGQgYmVcIjtcbiAgICByZXN1bHQgKz0gYCAke1JhbmdlLmdldE9wZXJhdG9yKGxvZ2ljID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIGxvZ2ljID8gc3RhcnRFeGNsdXNpdmUgOiAhc3RhcnRFeGNsdXNpdmUpfSAke3N0YXJ0fSBgO1xuICAgIHJlc3VsdCArPSBsb2dpYyA/IFwiYW5kXCIgOiBcIm9yXCI7XG4gICAgcmVzdWx0ICs9IGAgJHtSYW5nZS5nZXRPcGVyYXRvcihsb2dpYyA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCBsb2dpYyA/IGVuZEV4Y2x1c2l2ZSA6ICFlbmRFeGNsdXNpdmUpfSAke2VuZH1gO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8UmFuZ2VWYWx1ZT59IHZhbHVlc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvZ2ljIGlzIG5vdCBsb2dpYyBhcHBsaWVkXG4gICAqIEByZXR1cm4ge1JhbmdlVmFsdWV9IGNvbXB1dGVkIHZhbHVlIGFuZCBpdCdzIGV4Y2x1c2l2ZSBmbGFnXG4gICAqL1xuXG5cbiAgc3RhdGljIGdldFJhbmdlVmFsdWUodmFsdWVzLCBsb2dpYykge1xuICAgIGxldCBtaW5NYXggPSBsb2dpYyA/IEluZmluaXR5IDogLUluZmluaXR5O1xuICAgIGxldCBqID0gLTE7XG4gICAgY29uc3QgcHJlZGljYXRlID0gbG9naWMgP1xuICAgIC8qKiBAdHlwZSB7UmFuZ2VWYWx1ZUNhbGxiYWNrfSAqL1xuICAgIChbdmFsdWVdKSA9PiB2YWx1ZSA8PSBtaW5NYXggOlxuICAgIC8qKiBAdHlwZSB7UmFuZ2VWYWx1ZUNhbGxiYWNrfSAqL1xuICAgIChbdmFsdWVdKSA9PiB2YWx1ZSA+PSBtaW5NYXg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZXNbaV0pKSB7XG4gICAgICAgIFttaW5NYXhdID0gdmFsdWVzW2ldO1xuICAgICAgICBqID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaiA+IC0xKSB7XG4gICAgICByZXR1cm4gdmFsdWVzW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBbSW5maW5pdHksIHRydWVdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtBcnJheTxSYW5nZVZhbHVlPn0gKi9cbiAgICB0aGlzLl9sZWZ0ID0gW107XG4gICAgLyoqIEB0eXBlIHtBcnJheTxSYW5nZVZhbHVlPn0gKi9cblxuICAgIHRoaXMuX3JpZ2h0ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBleGNsdXNpdmVcbiAgICovXG5cblxuICBsZWZ0KHZhbHVlLCBleGNsdXNpdmUgPSBmYWxzZSkge1xuICAgIHRoaXMuX2xlZnQucHVzaChbdmFsdWUsIGV4Y2x1c2l2ZV0pO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZXhjbHVzaXZlXG4gICAqL1xuXG5cbiAgcmlnaHQodmFsdWUsIGV4Y2x1c2l2ZSA9IGZhbHNlKSB7XG4gICAgdGhpcy5fcmlnaHQucHVzaChbdmFsdWUsIGV4Y2x1c2l2ZV0pO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvZ2ljIGlzIG5vdCBsb2dpYyBhcHBsaWVkXG4gICAqIEByZXR1cm4ge3N0cmluZ30gXCJzbWFydFwiIHJhbmdlIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgKi9cblxuXG4gIGZvcm1hdChsb2dpYyA9IHRydWUpIHtcbiAgICBjb25zdCBbc3RhcnQsIGxlZnRFeGNsdXNpdmVdID0gUmFuZ2UuZ2V0UmFuZ2VWYWx1ZSh0aGlzLl9sZWZ0LCBsb2dpYyk7XG4gICAgY29uc3QgW2VuZCwgcmlnaHRFeGNsdXNpdmVdID0gUmFuZ2UuZ2V0UmFuZ2VWYWx1ZSh0aGlzLl9yaWdodCwgIWxvZ2ljKTtcblxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHN0YXJ0KSAmJiAhTnVtYmVyLmlzRmluaXRlKGVuZCkpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIGNvbnN0IHJlYWxTdGFydCA9IGxlZnRFeGNsdXNpdmUgPyBzdGFydCArIDEgOiBzdGFydDtcbiAgICBjb25zdCByZWFsRW5kID0gcmlnaHRFeGNsdXNpdmUgPyBlbmQgLSAxIDogZW5kOyAvLyBlLmcuIDUgPCB4IDwgNywgNSA8IHggPD0gNiwgNiA8PSB4IDw9IDZcblxuICAgIGlmIChyZWFsU3RhcnQgPT09IHJlYWxFbmQpIHtcbiAgICAgIHJldHVybiBgc2hvdWxkIGJlICR7bG9naWMgPyBcIlwiIDogXCIhXCJ9PSAke3JlYWxTdGFydH1gO1xuICAgIH0gLy8gZS5nLiA0IDwgeCA8IOKInlxuXG5cbiAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHN0YXJ0KSAmJiAhTnVtYmVyLmlzRmluaXRlKGVuZCkpIHtcbiAgICAgIHJldHVybiBSYW5nZS5mb3JtYXRMZWZ0KHN0YXJ0LCBsb2dpYywgbGVmdEV4Y2x1c2l2ZSk7XG4gICAgfSAvLyBlLmcuIOKIniA8IHggPCA0XG5cblxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHN0YXJ0KSAmJiBOdW1iZXIuaXNGaW5pdGUoZW5kKSkge1xuICAgICAgcmV0dXJuIFJhbmdlLmZvcm1hdFJpZ2h0KGVuZCwgbG9naWMsIHJpZ2h0RXhjbHVzaXZlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmFuZ2UuZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCwgbGVmdEV4Y2x1c2l2ZSwgcmlnaHRFeGNsdXNpdmUsIGxvZ2ljKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2U7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/util/Range.js\n");

/***/ }),

/***/ "./node_modules/schema-utils/dist/util/hints.js":
/*!******************************************************!*\
  !*** ./node_modules/schema-utils/dist/util/hints.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Range = __webpack_require__(/*! ./Range */ \"./node_modules/schema-utils/dist/util/Range.js\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvdXRpbC9oaW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsK0RBQVM7QUFDL0IsY0FBYyw4QkFBOEI7O0FBRTVDO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7OztBQUdBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsMENBQTBDLFFBQVEsV0FBVyxzQkFBc0I7QUFDbkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwyQ0FBMkMsUUFBUSxXQUFXLHNCQUFzQjtBQUNwRjtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLHFCQUFxQixnQkFBZ0Isc0NBQXNDO0FBQ25HOztBQUVBO0FBQ0Esd0JBQXdCLHFCQUFxQixlQUFlLHFDQUFxQztBQUNqRzs7QUFFQTtBQUNBLDRCQUE0QixtREFBbUQsRUFBRSw0Q0FBNEM7QUFDN0g7O0FBRUE7QUFDQSw0QkFBNEIsbURBQW1ELEVBQUUsNENBQTRDO0FBQzdIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaOzs7QUFHQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLHFCQUFxQixpQkFBaUIsa0JBQWtCO0FBQ2hGOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbS1sZXZpdHkvLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvdXRpbC9oaW50cy5qcz9jYWQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoXCIuL1JhbmdlXCIpO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi92YWxpZGF0ZVwiKS5TY2hlbWF9IFNjaGVtYSAqL1xuXG4vKipcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9naWNcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMuc3RyaW5nSGludHMgPSBmdW5jdGlvbiBzdHJpbmdIaW50cyhzY2hlbWEsIGxvZ2ljKSB7XG4gIGNvbnN0IGhpbnRzID0gW107XG4gIGxldCB0eXBlID0gXCJzdHJpbmdcIjtcbiAgY29uc3QgY3VycmVudFNjaGVtYSA9IHsgLi4uc2NoZW1hXG4gIH07XG5cbiAgaWYgKCFsb2dpYykge1xuICAgIGNvbnN0IHRtcExlbmd0aCA9IGN1cnJlbnRTY2hlbWEubWluTGVuZ3RoO1xuICAgIGNvbnN0IHRtcEZvcm1hdCA9IGN1cnJlbnRTY2hlbWEuZm9ybWF0TWluaW11bTtcbiAgICBjb25zdCB0bXBFeGNsdXNpdmUgPSBjdXJyZW50U2NoZW1hLmZvcm1hdEV4Y2x1c2l2ZU1heGltdW07XG4gICAgY3VycmVudFNjaGVtYS5taW5MZW5ndGggPSBjdXJyZW50U2NoZW1hLm1heExlbmd0aDtcbiAgICBjdXJyZW50U2NoZW1hLm1heExlbmd0aCA9IHRtcExlbmd0aDtcbiAgICBjdXJyZW50U2NoZW1hLmZvcm1hdE1pbmltdW0gPSBjdXJyZW50U2NoZW1hLmZvcm1hdE1heGltdW07XG4gICAgY3VycmVudFNjaGVtYS5mb3JtYXRNYXhpbXVtID0gdG1wRm9ybWF0O1xuICAgIGN1cnJlbnRTY2hlbWEuZm9ybWF0RXhjbHVzaXZlTWF4aW11bSA9ICFjdXJyZW50U2NoZW1hLmZvcm1hdEV4Y2x1c2l2ZU1pbmltdW07XG4gICAgY3VycmVudFNjaGVtYS5mb3JtYXRFeGNsdXNpdmVNaW5pbXVtID0gIXRtcEV4Y2x1c2l2ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY3VycmVudFNjaGVtYS5taW5MZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAoY3VycmVudFNjaGVtYS5taW5MZW5ndGggPT09IDEpIHtcbiAgICAgIHR5cGUgPSBcIm5vbi1lbXB0eSBzdHJpbmdcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoY3VycmVudFNjaGVtYS5taW5MZW5ndGggLSAxLCAwKTtcbiAgICAgIGhpbnRzLnB1c2goYHNob3VsZCBiZSBsb25nZXIgdGhhbiAke2xlbmd0aH0gY2hhcmFjdGVyJHtsZW5ndGggPiAxID8gXCJzXCIgOiBcIlwifWApO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgY3VycmVudFNjaGVtYS5tYXhMZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAoY3VycmVudFNjaGVtYS5tYXhMZW5ndGggPT09IDApIHtcbiAgICAgIHR5cGUgPSBcImVtcHR5IHN0cmluZ1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsZW5ndGggPSBjdXJyZW50U2NoZW1hLm1heExlbmd0aCArIDE7XG4gICAgICBoaW50cy5wdXNoKGBzaG91bGQgYmUgc2hvcnRlciB0aGFuICR7bGVuZ3RofSBjaGFyYWN0ZXIke2xlbmd0aCA+IDEgPyBcInNcIiA6IFwiXCJ9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGN1cnJlbnRTY2hlbWEucGF0dGVybikge1xuICAgIGhpbnRzLnB1c2goYHNob3VsZCR7bG9naWMgPyBcIlwiIDogXCIgbm90XCJ9IG1hdGNoIHBhdHRlcm4gJHtKU09OLnN0cmluZ2lmeShjdXJyZW50U2NoZW1hLnBhdHRlcm4pfWApO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRTY2hlbWEuZm9ybWF0KSB7XG4gICAgaGludHMucHVzaChgc2hvdWxkJHtsb2dpYyA/IFwiXCIgOiBcIiBub3RcIn0gbWF0Y2ggZm9ybWF0ICR7SlNPTi5zdHJpbmdpZnkoY3VycmVudFNjaGVtYS5mb3JtYXQpfWApO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRTY2hlbWEuZm9ybWF0TWluaW11bSkge1xuICAgIGhpbnRzLnB1c2goYHNob3VsZCBiZSAke2N1cnJlbnRTY2hlbWEuZm9ybWF0RXhjbHVzaXZlTWluaW11bSA/IFwiPlwiIDogXCI+PVwifSAke0pTT04uc3RyaW5naWZ5KGN1cnJlbnRTY2hlbWEuZm9ybWF0TWluaW11bSl9YCk7XG4gIH1cblxuICBpZiAoY3VycmVudFNjaGVtYS5mb3JtYXRNYXhpbXVtKSB7XG4gICAgaGludHMucHVzaChgc2hvdWxkIGJlICR7Y3VycmVudFNjaGVtYS5mb3JtYXRFeGNsdXNpdmVNYXhpbXVtID8gXCI8XCIgOiBcIjw9XCJ9ICR7SlNPTi5zdHJpbmdpZnkoY3VycmVudFNjaGVtYS5mb3JtYXRNYXhpbXVtKX1gKTtcbiAgfVxuXG4gIHJldHVybiBbdHlwZV0uY29uY2F0KGhpbnRzKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9naWNcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMubnVtYmVySGludHMgPSBmdW5jdGlvbiBudW1iZXJIaW50cyhzY2hlbWEsIGxvZ2ljKSB7XG4gIGNvbnN0IGhpbnRzID0gW3NjaGVtYS50eXBlID09PSBcImludGVnZXJcIiA/IFwiaW50ZWdlclwiIDogXCJudW1iZXJcIl07XG4gIGNvbnN0IHJhbmdlID0gbmV3IFJhbmdlKCk7XG5cbiAgaWYgKHR5cGVvZiBzY2hlbWEubWluaW11bSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJhbmdlLmxlZnQoc2NoZW1hLm1pbmltdW0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzY2hlbWEuZXhjbHVzaXZlTWluaW11bSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJhbmdlLmxlZnQoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0sIHRydWUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzY2hlbWEubWF4aW11bSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJhbmdlLnJpZ2h0KHNjaGVtYS5tYXhpbXVtKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByYW5nZS5yaWdodChzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSwgdHJ1ZSk7XG4gIH1cblxuICBjb25zdCByYW5nZUZvcm1hdCA9IHJhbmdlLmZvcm1hdChsb2dpYyk7XG5cbiAgaWYgKHJhbmdlRm9ybWF0KSB7XG4gICAgaGludHMucHVzaChyYW5nZUZvcm1hdCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNjaGVtYS5tdWx0aXBsZU9mID09PSBcIm51bWJlclwiKSB7XG4gICAgaGludHMucHVzaChgc2hvdWxkJHtsb2dpYyA/IFwiXCIgOiBcIiBub3RcIn0gYmUgbXVsdGlwbGUgb2YgJHtzY2hlbWEubXVsdGlwbGVPZn1gKTtcbiAgfVxuXG4gIHJldHVybiBoaW50cztcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/util/hints.js\n");

/***/ }),

/***/ "./node_modules/schema-utils/dist/validate.js":
/*!****************************************************!*\
  !*** ./node_modules/schema-utils/dist/validate.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.validate = validate;\nObject.defineProperty(exports, \"ValidationError\", ({\n  enumerable: true,\n  get: function () {\n    return _ValidationError.default;\n  }\n}));\n\nvar _absolutePath = _interopRequireDefault(__webpack_require__(/*! ./keywords/absolutePath */ \"./node_modules/schema-utils/dist/keywords/absolutePath.js\"));\n\nvar _ValidationError = _interopRequireDefault(__webpack_require__(/*! ./ValidationError */ \"./node_modules/schema-utils/dist/ValidationError.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Use CommonJS require for ajv libs so TypeScript consumers aren't locked into esModuleInterop (see #110).\nconst Ajv = __webpack_require__(/*! ajv */ \"./node_modules/ajv/lib/ajv.js\");\n\nconst ajvKeywords = __webpack_require__(/*! ajv-keywords */ \"./node_modules/ajv-keywords/index.js\");\n/** @typedef {import(\"json-schema\").JSONSchema4} JSONSchema4 */\n\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"ajv\").ErrorObject} ErrorObject */\n\n/**\n * @typedef {Object} Extend\n * @property {number=} formatMinimum\n * @property {number=} formatMaximum\n * @property {boolean=} formatExclusiveMinimum\n * @property {boolean=} formatExclusiveMaximum\n * @property {string=} link\n */\n\n/** @typedef {(JSONSchema4 | JSONSchema6 | JSONSchema7) & Extend} Schema */\n\n/** @typedef {ErrorObject & { children?: Array<ErrorObject>}} SchemaUtilErrorObject */\n\n/**\n * @callback PostFormatter\n * @param {string} formattedError\n * @param {SchemaUtilErrorObject} error\n * @returns {string}\n */\n\n/**\n * @typedef {Object} ValidationErrorConfiguration\n * @property {string=} name\n * @property {string=} baseDataPath\n * @property {PostFormatter=} postFormatter\n */\n\n\nconst ajv = new Ajv({\n  allErrors: true,\n  verbose: true,\n  $data: true\n});\najvKeywords(ajv, [\"instanceof\", \"formatMinimum\", \"formatMaximum\", \"patternRequired\"]); // Custom keywords\n\n(0, _absolutePath.default)(ajv);\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @param {ValidationErrorConfiguration=} configuration\n * @returns {void}\n */\n\nfunction validate(schema, options, configuration) {\n  let errors = [];\n\n  if (Array.isArray(options)) {\n    errors = Array.from(options, nestedOptions => validateObject(schema, nestedOptions));\n    errors.forEach((list, idx) => {\n      const applyPrefix =\n      /**\n       * @param {SchemaUtilErrorObject} error\n       */\n      error => {\n        // eslint-disable-next-line no-param-reassign\n        error.dataPath = `[${idx}]${error.dataPath}`;\n\n        if (error.children) {\n          error.children.forEach(applyPrefix);\n        }\n      };\n\n      list.forEach(applyPrefix);\n    });\n    errors = errors.reduce((arr, items) => {\n      arr.push(...items);\n      return arr;\n    }, []);\n  } else {\n    errors = validateObject(schema, options);\n  }\n\n  if (errors.length > 0) {\n    throw new _ValidationError.default(errors, schema, configuration);\n  }\n}\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction validateObject(schema, options) {\n  const compiledSchema = ajv.compile(schema);\n  const valid = compiledSchema(options);\n  if (valid) return [];\n  return compiledSchema.errors ? filterErrors(compiledSchema.errors) : [];\n}\n/**\n * @param {Array<ErrorObject>} errors\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterErrors(errors) {\n  /** @type {Array<SchemaUtilErrorObject>} */\n  let newErrors = [];\n\n  for (const error of\n  /** @type {Array<SchemaUtilErrorObject>} */\n  errors) {\n    const {\n      dataPath\n    } = error;\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    let children = [];\n    newErrors = newErrors.filter(oldError => {\n      if (oldError.dataPath.includes(dataPath)) {\n        if (oldError.children) {\n          children = children.concat(oldError.children.slice(0));\n        } // eslint-disable-next-line no-undefined, no-param-reassign\n\n\n        oldError.children = undefined;\n        children.push(oldError);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (children.length) {\n      error.children = children;\n    }\n\n    newErrors.push(error);\n  }\n\n  return newErrors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvdmFsaWRhdGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0JBQWdCO0FBQ2hCLG1EQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQzs7QUFFRiwyQ0FBMkMsbUJBQU8sQ0FBQywwRkFBeUI7O0FBRTVFLDhDQUE4QyxtQkFBTyxDQUFDLDhFQUFtQjs7QUFFekUsdUNBQXVDLHVDQUF1Qzs7QUFFOUU7QUFDQSxZQUFZLG1CQUFPLENBQUMsMENBQUs7O0FBRXpCLG9CQUFvQixtQkFBTyxDQUFDLDBEQUFjO0FBQzFDLGNBQWMsbUNBQW1DOztBQUVqRCxjQUFjLG1DQUFtQzs7QUFFakQsY0FBYyxtQ0FBbUM7O0FBRWpELGNBQWMsMkJBQTJCOztBQUV6QztBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVM7QUFDdkIsY0FBYyxTQUFTO0FBQ3ZCLGNBQWMsVUFBVTtBQUN4QixjQUFjLFVBQVU7QUFDeEIsY0FBYyxTQUFTO0FBQ3ZCOztBQUVBLGNBQWMsb0RBQW9EOztBQUVsRSxjQUFjLGdCQUFnQixnQ0FBZ0M7O0FBRTlEO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyx1QkFBdUI7QUFDbEMsYUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUztBQUN2QixjQUFjLFNBQVM7QUFDdkIsY0FBYyxnQkFBZ0I7QUFDOUI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHVGQUF1Rjs7QUFFdkY7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLCtCQUErQjtBQUMxQyxhQUFhO0FBQ2I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsSUFBSSxHQUFHLGVBQWU7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsd0JBQXdCO0FBQ25DLGFBQWE7QUFDYjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQixhQUFhO0FBQ2I7OztBQUdBO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0M7O0FBRUE7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZUFBZSw4QkFBOEI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tLWxldml0eS8uL25vZGVfbW9kdWxlcy9zY2hlbWEtdXRpbHMvZGlzdC92YWxpZGF0ZS5qcz85OGNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsaWRhdGlvbkVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfYWJzb2x1dGVQYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9rZXl3b3Jkcy9hYnNvbHV0ZVBhdGhcIikpO1xuXG52YXIgX1ZhbGlkYXRpb25FcnJvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVmFsaWRhdGlvbkVycm9yXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVXNlIENvbW1vbkpTIHJlcXVpcmUgZm9yIGFqdiBsaWJzIHNvIFR5cGVTY3JpcHQgY29uc3VtZXJzIGFyZW4ndCBsb2NrZWQgaW50byBlc01vZHVsZUludGVyb3AgKHNlZSAjMTEwKS5cbmNvbnN0IEFqdiA9IHJlcXVpcmUoXCJhanZcIik7XG5cbmNvbnN0IGFqdktleXdvcmRzID0gcmVxdWlyZShcImFqdi1rZXl3b3Jkc1wiKTtcbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwianNvbi1zY2hlbWFcIikuSlNPTlNjaGVtYTR9IEpTT05TY2hlbWE0ICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwianNvbi1zY2hlbWFcIikuSlNPTlNjaGVtYTZ9IEpTT05TY2hlbWE2ICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwianNvbi1zY2hlbWFcIikuSlNPTlNjaGVtYTd9IEpTT05TY2hlbWE3ICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiYWp2XCIpLkVycm9yT2JqZWN0fSBFcnJvck9iamVjdCAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEV4dGVuZFxuICogQHByb3BlcnR5IHtudW1iZXI9fSBmb3JtYXRNaW5pbXVtXG4gKiBAcHJvcGVydHkge251bWJlcj19IGZvcm1hdE1heGltdW1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbj19IGZvcm1hdEV4Y2x1c2l2ZU1pbmltdW1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbj19IGZvcm1hdEV4Y2x1c2l2ZU1heGltdW1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gbGlua1xuICovXG5cbi8qKiBAdHlwZWRlZiB7KEpTT05TY2hlbWE0IHwgSlNPTlNjaGVtYTYgfCBKU09OU2NoZW1hNykgJiBFeHRlbmR9IFNjaGVtYSAqL1xuXG4vKiogQHR5cGVkZWYge0Vycm9yT2JqZWN0ICYgeyBjaGlsZHJlbj86IEFycmF5PEVycm9yT2JqZWN0Pn19IFNjaGVtYVV0aWxFcnJvck9iamVjdCAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBQb3N0Rm9ybWF0dGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0dGVkRXJyb3JcbiAqIEBwYXJhbSB7U2NoZW1hVXRpbEVycm9yT2JqZWN0fSBlcnJvclxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFZhbGlkYXRpb25FcnJvckNvbmZpZ3VyYXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBiYXNlRGF0YVBhdGhcbiAqIEBwcm9wZXJ0eSB7UG9zdEZvcm1hdHRlcj19IHBvc3RGb3JtYXR0ZXJcbiAqL1xuXG5cbmNvbnN0IGFqdiA9IG5ldyBBanYoe1xuICBhbGxFcnJvcnM6IHRydWUsXG4gIHZlcmJvc2U6IHRydWUsXG4gICRkYXRhOiB0cnVlXG59KTtcbmFqdktleXdvcmRzKGFqdiwgW1wiaW5zdGFuY2VvZlwiLCBcImZvcm1hdE1pbmltdW1cIiwgXCJmb3JtYXRNYXhpbXVtXCIsIFwicGF0dGVyblJlcXVpcmVkXCJdKTsgLy8gQ3VzdG9tIGtleXdvcmRzXG5cbigwLCBfYWJzb2x1dGVQYXRoLmRlZmF1bHQpKGFqdik7XG4vKipcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7QXJyYXk8b2JqZWN0PiB8IG9iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtWYWxpZGF0aW9uRXJyb3JDb25maWd1cmF0aW9uPX0gY29uZmlndXJhdGlvblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGUoc2NoZW1hLCBvcHRpb25zLCBjb25maWd1cmF0aW9uKSB7XG4gIGxldCBlcnJvcnMgPSBbXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIGVycm9ycyA9IEFycmF5LmZyb20ob3B0aW9ucywgbmVzdGVkT3B0aW9ucyA9PiB2YWxpZGF0ZU9iamVjdChzY2hlbWEsIG5lc3RlZE9wdGlvbnMpKTtcbiAgICBlcnJvcnMuZm9yRWFjaCgobGlzdCwgaWR4KSA9PiB7XG4gICAgICBjb25zdCBhcHBseVByZWZpeCA9XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7U2NoZW1hVXRpbEVycm9yT2JqZWN0fSBlcnJvclxuICAgICAgICovXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBlcnJvci5kYXRhUGF0aCA9IGBbJHtpZHh9XSR7ZXJyb3IuZGF0YVBhdGh9YDtcblxuICAgICAgICBpZiAoZXJyb3IuY2hpbGRyZW4pIHtcbiAgICAgICAgICBlcnJvci5jaGlsZHJlbi5mb3JFYWNoKGFwcGx5UHJlZml4KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbGlzdC5mb3JFYWNoKGFwcGx5UHJlZml4KTtcbiAgICB9KTtcbiAgICBlcnJvcnMgPSBlcnJvcnMucmVkdWNlKChhcnIsIGl0ZW1zKSA9PiB7XG4gICAgICBhcnIucHVzaCguLi5pdGVtcyk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKTtcbiAgfSBlbHNlIHtcbiAgICBlcnJvcnMgPSB2YWxpZGF0ZU9iamVjdChzY2hlbWEsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdChlcnJvcnMsIHNjaGVtYSwgY29uZmlndXJhdGlvbik7XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtIHtTY2hlbWF9IHNjaGVtYVxuICogQHBhcmFtIHtBcnJheTxvYmplY3Q+IHwgb2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7QXJyYXk8U2NoZW1hVXRpbEVycm9yT2JqZWN0Pn1cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KHNjaGVtYSwgb3B0aW9ucykge1xuICBjb25zdCBjb21waWxlZFNjaGVtYSA9IGFqdi5jb21waWxlKHNjaGVtYSk7XG4gIGNvbnN0IHZhbGlkID0gY29tcGlsZWRTY2hlbWEob3B0aW9ucyk7XG4gIGlmICh2YWxpZCkgcmV0dXJuIFtdO1xuICByZXR1cm4gY29tcGlsZWRTY2hlbWEuZXJyb3JzID8gZmlsdGVyRXJyb3JzKGNvbXBpbGVkU2NoZW1hLmVycm9ycykgOiBbXTtcbn1cbi8qKlxuICogQHBhcmFtIHtBcnJheTxFcnJvck9iamVjdD59IGVycm9yc1xuICogQHJldHVybnMge0FycmF5PFNjaGVtYVV0aWxFcnJvck9iamVjdD59XG4gKi9cblxuXG5mdW5jdGlvbiBmaWx0ZXJFcnJvcnMoZXJyb3JzKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8U2NoZW1hVXRpbEVycm9yT2JqZWN0Pn0gKi9cbiAgbGV0IG5ld0Vycm9ycyA9IFtdO1xuXG4gIGZvciAoY29uc3QgZXJyb3Igb2ZcbiAgLyoqIEB0eXBlIHtBcnJheTxTY2hlbWFVdGlsRXJyb3JPYmplY3Q+fSAqL1xuICBlcnJvcnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhUGF0aFxuICAgIH0gPSBlcnJvcjtcbiAgICAvKiogQHR5cGUge0FycmF5PFNjaGVtYVV0aWxFcnJvck9iamVjdD59ICovXG5cbiAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICBuZXdFcnJvcnMgPSBuZXdFcnJvcnMuZmlsdGVyKG9sZEVycm9yID0+IHtcbiAgICAgIGlmIChvbGRFcnJvci5kYXRhUGF0aC5pbmNsdWRlcyhkYXRhUGF0aCkpIHtcbiAgICAgICAgaWYgKG9sZEVycm9yLmNoaWxkcmVuKSB7XG4gICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQob2xkRXJyb3IuY2hpbGRyZW4uc2xpY2UoMCkpO1xuICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWQsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICAgICAgICBvbGRFcnJvci5jaGlsZHJlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChvbGRFcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBlcnJvci5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIG5ld0Vycm9ycy5wdXNoKGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiBuZXdFcnJvcnM7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/schema-utils/dist/validate.js\n");

/***/ })

}]);